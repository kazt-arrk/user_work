From 0a8319c6fffbc92815416f49462a6f0c174d00ea Mon Sep 17 00:00:00 2001
From: "Nguyen Van Linh [FGA.BU13.RZG]" <linhNV25@fsoft.com.vn>
Date: Wed, 23 May 2018 10:22:17 +0700
Subject: [PATCH 2/2] add dma buffer support direct rendering

Signed-off-by: Nguyen Van Linh [FGA.BU13.RZG] <linhNV25@fsoft.com.vn>
---
 libweston/compositor-drm.c | 252 ++++++++++++++++++++++++++++++---------------
 libweston/compositor.h     |   1 +
 2 files changed, 168 insertions(+), 85 deletions(-)

diff --git a/libweston/compositor-drm.c b/libweston/compositor-drm.c
index 32ec403..5fe7836 100644
--- a/libweston/compositor-drm.c
+++ b/libweston/compositor-drm.c
@@ -141,6 +141,9 @@ struct drm_fb {

	/* Used by dumb fbs */
	void *map;
+
+	/* Used by dmabuf */
+	struct linux_dmabuf_buffer *dmabuf;
 };

 struct drm_edid {
@@ -280,16 +283,41 @@ drm_output_find_by_connector(struct drm_backend *b, uint32_t connector_id)
 }

 static void
-drm_fb_destroy_callback(struct gbm_bo *bo, void *data)
+drm_fb_destroy(struct drm_fb *fb)
 {
-	struct drm_fb *fb = data;
-
-	if (fb->fb_id)
+	if (fb->fb_id != 0)
		drmModeRmFB(fb->fd, fb->fb_id);
-
	weston_buffer_reference(&fb->buffer_ref, NULL);
+	free(fb);
+}
+
+static void
+drm_fb_destroy_dumb(struct drm_fb *fb)
+{
+	struct drm_mode_destroy_dumb destroy_arg;
+
+	if (!fb->map)
+		return;

-	free(data);
+	if (fb->map && fb->size > 0)
+		munmap(fb->map, fb->size);
+
+	if (fb->dmafd)
+		close(fb->dmafd);
+
+	memset(&destroy_arg, 0, sizeof(destroy_arg));
+	destroy_arg.handle = fb->handle;
+	drmIoctl(fb->fd, DRM_IOCTL_MODE_DESTROY_DUMB, &destroy_arg);
+
+	drm_fb_destroy(fb);
+}
+
+static void
+drm_fb_destroy_gbm(struct gbm_bo *bo, void *data)
+{
+	struct drm_fb *fb = data;
+
+	drm_fb_destroy(fb);
 }

 static struct drm_fb *
@@ -368,7 +396,7 @@ drm_fb_create_dumb(struct drm_backend *b, int width, int height,
	if (ret)
		goto err_add_fb;

-	fb->map = mmap(NULL, fb->size, PROT_WRITE,
+	fb->map = mmap(NULL, fb->size, PROT_READ | PROT_WRITE,
		       MAP_SHARED, b->drm.fd, map_arg.offset);
	if (fb->map == MAP_FAILED)
		goto err_add_fb;
@@ -395,26 +423,71 @@ err_fb:
	return NULL;
 }

-static void
-drm_fb_destroy_dumb(struct drm_fb *fb)
+static struct drm_fb *
+drm_fb_create_dmabuf(struct linux_dmabuf_buffer *dmabuf,
+		     struct drm_backend *backend, uint32_t format)
 {
-	struct drm_mode_destroy_dumb destroy_arg;
+	struct drm_fb *fb = NULL;
+	uint32_t width, height, fb_id, handles[4];
+	int i, ret;

-	if (!fb->map)
-		return;
+	if (!format || !dmabuf)
+		return NULL;

-	if (fb->fb_id)
-		drmModeRmFB(fb->fd, fb->fb_id);
+	width = dmabuf->attributes.width;
+	height = dmabuf->attributes.height;
+	if (backend->min_width > width || width > backend->max_width ||
+	    backend->min_height > height || height > backend->max_height) {
+		weston_log("dmabuf geometry out of bounds\n");
+		return NULL;
+	}

-	weston_buffer_reference(&fb->buffer_ref, NULL);
+	fb = zalloc(sizeof *fb);
+	if (!fb)
+		return NULL;

-	munmap(fb->map, fb->size);
+	for (i = 0; i < dmabuf->attributes.n_planes; i++) {
+		ret = drmPrimeFDToHandle(backend->drm.fd,
+					 dmabuf->attributes.fd[i],
+					 &handles[i]);
+		if (ret) {
+			weston_log("drmPrimeFDToHandle() failed. %s\n",
+				   strerror(errno));
+			free(fb);
+			fb = NULL;
+			goto release;
+		}
+	}

-	memset(&destroy_arg, 0, sizeof(destroy_arg));
-	destroy_arg.handle = fb->handle;
-	drmIoctl(fb->fd, DRM_IOCTL_MODE_DESTROY_DUMB, &destroy_arg);
+	ret = drmModeAddFB2(backend->drm.fd, width, height,
+			    format, handles, dmabuf->attributes.stride,
+			    dmabuf->attributes.offset, &fb_id, 0);
+	if (ret) {
+		weston_log("drmModeAddFB2 failed. %s\n", strerror(errno));
+		free(fb);
+		fb = NULL;
+		goto release;
+	}

-	free(fb);
+	fb->fb_id = fb_id;
+	fb->stride = dmabuf->attributes.stride[0];
+	fb->fd = backend->drm.fd;
+	fb->dmabuf = dmabuf;
+
+release:
+	for (i = 0; i < dmabuf->attributes.n_planes; i++) {
+		struct drm_gem_close gem_close;
+
+		if (!handles[i])
+			continue;
+
+		gem_close.handle = handles[i];
+		if (drmIoctl(backend->drm.fd, DRM_IOCTL_GEM_CLOSE,
+			     &gem_close) != 0)
+			weston_log("DRM_IOCTL_GEM_CLOSE failed.(%s)\n",
+				   strerror(errno));
+	}
+	return fb;
 }

 static struct drm_fb *
@@ -475,7 +548,7 @@ drm_fb_get_from_bo(struct gbm_bo *bo,
		goto err_free;
	}

-	gbm_bo_set_user_data(bo, fb, drm_fb_destroy_callback);
+	gbm_bo_set_user_data(bo, fb, drm_fb_destroy_gbm);

	return fb;

@@ -503,6 +576,8 @@ drm_output_release_fb(struct drm_output *output, struct drm_fb *fb)
	if (fb->map &&
             (fb != output->dumb[0] && fb != output->dumb[1])) {
		drm_fb_destroy_dumb(fb);
+	} else if (fb->dmabuf) {
+		drm_fb_destroy(fb);
	} else if (fb->bo) {
		if (fb->is_client_buffer)
			gbm_bo_destroy(fb->bo);
@@ -514,13 +589,10 @@ drm_output_release_fb(struct drm_output *output, struct drm_fb *fb)

 static uint32_t
 drm_output_check_scanout_format(struct drm_output *output,
-				struct weston_surface *es, struct gbm_bo *bo)
+				struct weston_surface *es, uint32_t format)
 {
-	uint32_t format;
	pixman_region32_t r;

-	format = gbm_bo_get_format(bo);
-
	if (format == GBM_FORMAT_ARGB8888) {
		/* We can scanout an ARGB buffer if the surface's
		 * opaque region covers the whole output, but we have
@@ -549,13 +621,10 @@ drm_output_prepare_scanout_view(struct drm_output *output,
	struct drm_backend *b = to_drm_backend(output->base.compositor);
	struct weston_buffer *buffer = ev->surface->buffer_ref.buffer;
	struct weston_buffer_viewport *viewport = &ev->surface->buffer_viewport;
-	struct gbm_bo *bo;
+	struct linux_dmabuf_buffer *dmabuf;
+	struct gbm_bo *bo = NULL;
	uint32_t format;

-	/* We use GBM to import buffers. */
-	if (b->gbm == NULL)
-		return NULL;
-
	if (buffer == NULL)
		return NULL;

@@ -574,22 +643,32 @@ drm_output_prepare_scanout_view(struct drm_output *output,
	if (viewport->buffer.transform != output->base.transform)
		return NULL;

-	bo = gbm_bo_import(b->gbm, GBM_BO_IMPORT_WL_BUFFER,
-			   buffer->resource, GBM_BO_USE_SCANOUT);
-
-	/* Unable to use the buffer for scanout */
-	if (!bo)
-		return NULL;
-
-	format = drm_output_check_scanout_format(output, ev->surface, bo);
-	if (format == 0) {
-		gbm_bo_destroy(bo);
-		return NULL;
-	}
+	dmabuf = linux_dmabuf_buffer_get(buffer->resource);
+	if (dmabuf) {
+		format = drm_output_check_scanout_format(
+			output, ev->surface, dmabuf->attributes.format);
+		if (format == 0)
+			return NULL;
+		output->next = drm_fb_create_dmabuf(dmabuf, b, format);
+		if (!output->next)
+			return NULL;
+	} else if (b->gbm) {
+		bo = gbm_bo_import(b->gbm, GBM_BO_IMPORT_WL_BUFFER,
+				   buffer->resource, GBM_BO_USE_SCANOUT);
+		/* Unable to use the buffer for scanout */
+		if (!bo)
+			return NULL;

-	output->next = drm_fb_get_from_bo(bo, b, format);
-	if (!output->next) {
-		gbm_bo_destroy(bo);
+		format = drm_output_check_scanout_format(
+			output, ev->surface, gbm_bo_get_format(bo));
+		if (format == 0)
+			return NULL;
+		output->next = drm_fb_get_from_bo(bo, b, format);
+		if (!output->next) {
+			gbm_bo_destroy(bo);
+			return NULL;
+		}
+	} else {
		return NULL;
	}

@@ -943,9 +1022,6 @@ vblank_handler(int fd, unsigned int frame, unsigned int sec, unsigned int usec,
 }

 static void
-drm_output_fini_v4l2(struct drm_output *output);
-
-static void
 drm_output_destroy(struct weston_output *base);

 static void
@@ -989,11 +1065,9 @@ page_flip_handler(int fd, unsigned int frame,

 static uint32_t
 drm_output_check_sprite_format(struct drm_sprite *s,
-			       struct weston_view *ev, struct gbm_bo *bo)
+			       struct weston_view *ev, uint32_t format)
 {
-	uint32_t i, format;
-
-	format = gbm_bo_get_format(bo);
+	uint32_t i;

	if (format == GBM_FORMAT_ARGB8888) {
		pixman_region32_t r;
@@ -1034,7 +1108,7 @@ drm_output_prepare_overlay_view(struct drm_output *output,
	struct drm_sprite *s;
	struct linux_dmabuf_buffer *dmabuf;
	int found = 0;
-	struct gbm_bo *bo;
+	struct gbm_bo *bo = NULL;
	pixman_region32_t dest_rect, src_rect;
	pixman_box32_t *box, tbox;
	uint32_t format;
@@ -1047,10 +1121,6 @@ drm_output_prepare_overlay_view(struct drm_output *output,
	if (ev->output_mask != (1u << output->base.id))
		return NULL;

-	/* We can only import GBM buffers. */
-	if (b->gbm == NULL)
-		return NULL;
-
	if (ev->surface->buffer_ref.buffer == NULL)
		return NULL;
	buffer_resource = ev->surface->buffer_ref.buffer->resource;
@@ -1081,22 +1151,31 @@ drm_output_prepare_overlay_view(struct drm_output *output,
	if (!found)
		return NULL;

-	if ((dmabuf = linux_dmabuf_buffer_get(buffer_resource))) {
+	dmabuf = linux_dmabuf_buffer_get(buffer_resource);
+	if (dmabuf && !b->no_addfb2) {
+		format = drm_output_check_sprite_format(
+				s, ev, dmabuf->attributes.format);
+		if (format == 0)
+			return NULL;
+		s->next = drm_fb_create_dmabuf(dmabuf, b, format);
+		if (!s->next)
+			return NULL;
+	}
+
+	if (!s->next) {
+		if (!b->gbm)
+			return NULL;
+
+		if (dmabuf) {
 #ifdef HAVE_GBM_FD_IMPORT
-		/* XXX: TODO:
-		 *
-		 * Use AddFB2 directly, do not go via GBM.
-		 * Add support for multiplanar formats.
-		 * Both require refactoring in the DRM-backend to
-		 * support a mix of gbm_bos and drmfbs.
-		 */
-		struct gbm_import_fd_data gbm_dmabuf = {
-			.fd     = dmabuf->attributes.fd[0],
-			.width  = dmabuf->attributes.width,
-			.height = dmabuf->attributes.height,
-			.stride = dmabuf->attributes.stride[0],
-			.format = dmabuf->attributes.format
-		};
+			struct gbm_bo *bo;
+			struct gbm_import_fd_data gbm_dmabuf = {
+				.fd     = dmabuf->attributes.fd[0],
+				.width  = dmabuf->attributes.width,
+				.height = dmabuf->attributes.height,
+				.stride = dmabuf->attributes.stride[0],
+				.format = dmabuf->attributes.format
+			};

                 /* XXX: TODO:
                  *
@@ -1112,8 +1191,8 @@ drm_output_prepare_overlay_view(struct drm_output *output,
		    dmabuf->attributes.flags)
			return NULL;

-		bo = gbm_bo_import(b->gbm, GBM_BO_IMPORT_FD, &gbm_dmabuf,
-				   GBM_BO_USE_SCANOUT);
+			bo = gbm_bo_import(b->gbm, GBM_BO_IMPORT_FD,
+					   &gbm_dmabuf, GBM_BO_USE_SCANOUT);
 #else
		return NULL;
 #endif
@@ -1124,16 +1203,17 @@ drm_output_prepare_overlay_view(struct drm_output *output,
	if (!bo)
		return NULL;

-	format = drm_output_check_sprite_format(s, ev, bo);
-	if (format == 0) {
-		gbm_bo_destroy(bo);
-		return NULL;
-	}
-
-	s->next = drm_fb_get_from_bo(bo, b, format);
-	if (!s->next) {
-		gbm_bo_destroy(bo);
-		return NULL;
+		format = drm_output_check_sprite_format(
+				s, ev, gbm_bo_get_format(bo));
+		if (format == 0) {
+			gbm_bo_destroy(bo);
+			return NULL;
+		}
+		s->next = drm_fb_get_from_bo(bo, b, format);
+		if (!s->next) {
+			gbm_bo_destroy(bo);
+			return NULL;
+		}
	}

	drm_fb_set_buffer(s->next, ev->surface->buffer_ref.buffer);
@@ -1472,10 +1552,12 @@ static void
 drm_output_fini_egl(struct drm_output *output);
 static int
 drm_output_init_pixman(struct drm_output *output, struct drm_backend *b);
+static void
+drm_output_fini_pixman(struct drm_output *output);
 static int
 drm_output_init_v4l2(struct drm_output *output, struct drm_backend *b);
 static void
-drm_output_fini_pixman(struct drm_output *output);
+drm_output_fini_v4l2(struct drm_output *output);

 static int
 drm_output_switch_mode(struct weston_output *output_base, struct weston_mode *mode)
diff --git a/libweston/compositor.h b/libweston/compositor.h
index 08e728a..df532ad 100644
--- a/libweston/compositor.h
+++ b/libweston/compositor.h
@@ -801,6 +801,7 @@ struct weston_compositor {
	struct wl_display *wl_display;
	struct weston_desktop_xwayland *xwayland;
	const struct weston_desktop_xwayland_interface *xwayland_interface;
+	struct weston_config *config;

	/* surface signals */
	struct wl_signal create_surface_signal;
--
1.9.1
