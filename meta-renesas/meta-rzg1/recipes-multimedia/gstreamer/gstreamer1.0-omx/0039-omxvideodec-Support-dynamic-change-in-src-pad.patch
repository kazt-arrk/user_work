From 4f1b4f7cb7127962e0490ddae056d3a5637b7f39 Mon Sep 17 00:00:00 2001
From: Loc Nguyen <loc.nguyen.ks@renesas.com>
Date: Wed, 12 Sep 2018 11:21:01 +0700
Subject: [PATCH] omxvideodec: Support dynamic change in src pad

This commit refer to a non-official commit from RCar gen3

Update capsfilter of src pad if information on current caps is different
with decoded information. At this time, format, width and height will be
updated based on information from port_def of OMX outport

Decoder will re-negotiate with downstream and this will lead to
reallocate buffers in omxbufferpool. It is necessary to move handlings
for id_array and current_buffer_index from init() & finalize() to
start() & stop()

Current limitation: This feature doesn't support for enable-crop=true
case. Because enable-crop case updated caps as its information.

refs #179061
Signed-off-by: Thao Luong <thao.luong.uw@renesas.com>

One FHD-stream was failed to display after decoding due to wrong resolution.
This commit fix the issue 

Signed-off-by: Loc Nguyen <loc.nguyen.ks@renesas.com>
---
 omx/gstomxbufferpool.c |  44 +++++++--------
 omx/gstomxvideodec.c   | 141 ++++++++++++++++++++++++++++++++++++++++++++++---
 omx/gstomxvideodec.h   |   5 ++
 3 files changed, 160 insertions(+), 30 deletions(-)

diff --git a/omx/gstomxbufferpool.c b/omx/gstomxbufferpool.c
index 67642f6..10ffea6 100644
--- a/omx/gstomxbufferpool.c
+++ b/omx/gstomxbufferpool.c
@@ -236,6 +236,10 @@ gst_omx_buffer_pool_start (GstBufferPool * bpool)
     return FALSE;
   }
   GST_OBJECT_UNLOCK (pool);
+#ifdef HAVE_MMNGRBUF
+  pool->id_array = g_array_new (FALSE, FALSE, sizeof (gint));
+#endif
+  pool->current_buffer_index = 0;
 
   return
       GST_BUFFER_POOL_CLASS (gst_omx_buffer_pool_parent_class)->start (bpool);
@@ -247,6 +251,24 @@ gst_omx_buffer_pool_stop (GstBufferPool * bpool)
   GstOMXBufferPool *pool = GST_OMX_BUFFER_POOL (bpool);
   gint i = 0;
 
+#ifdef HAVE_MMNGRBUF
+  if (GST_OMX_VIDEO_DEC (pool->element)->use_dmabuf) {
+    gint i;
+    gint dmabuf_id;
+
+    for (i = 0; i < pool->id_array->len; i++) {
+      dmabuf_id = g_array_index (pool->id_array, gint, i);
+      if (dmabuf_id >= 0) {
+        GST_DEBUG_OBJECT (pool, "mmngr_export_end_in_user (%d)", dmabuf_id);
+        mmngr_export_end_in_user (dmabuf_id);
+      } else {
+        GST_WARNING_OBJECT (pool, "Invalid dmabuf_id");
+      }
+    }
+  }
+  g_array_free (pool->id_array, TRUE);
+#endif
+
   /* When not using the default GstBufferPool::GstAtomicQueue then
    * GstBufferPool::free_buffer is not called while stopping the pool
    * (because the queue is empty) */
@@ -758,24 +780,6 @@ gst_omx_buffer_pool_finalize (GObject * object)
 {
   GstOMXBufferPool *pool = GST_OMX_BUFFER_POOL (object);
 
-#ifdef HAVE_MMNGRBUF
-  if (GST_OMX_VIDEO_DEC (pool->element)->use_dmabuf) {
-    gint i;
-    gint dmabuf_id;
-
-    for (i = 0; i < pool->id_array->len; i++) {
-      dmabuf_id = g_array_index (pool->id_array, gint, i);
-      if (dmabuf_id >= 0) {
-        GST_DEBUG_OBJECT (pool, "mmngr_export_end_in_user (%d)", dmabuf_id);
-        mmngr_export_end_in_user (dmabuf_id);
-      } else {
-        GST_WARNING_OBJECT (pool, "Invalid dmabuf_id");
-      }
-    }
-  }
-  g_array_free (pool->id_array, TRUE);
-#endif
-
   if (pool->element)
     gst_object_unref (pool->element);
   pool->element = NULL;
@@ -823,10 +827,6 @@ gst_omx_buffer_pool_init (GstOMXBufferPool * pool)
 {
   pool->buffers = g_ptr_array_new ();
   pool->allocator = g_object_new (gst_omx_memory_allocator_get_type (), NULL);
-#ifdef HAVE_MMNGRBUF
-  pool->id_array = g_array_new (FALSE, FALSE, sizeof (gint));
-#endif
-  pool->enc_buffer_index = 0;
 }
 
 GstBufferPool *
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 7bd53c4..d60fb8e 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -90,6 +90,10 @@ static void gst_omx_video_dec_set_property (GObject * object, guint prop_id,
     const GValue * value, GParamSpec * pspec);
 static void gst_omx_video_dec_get_property (GObject * object, guint prop_id,
     GValue * value, GParamSpec * pspec);
+static gboolean gst_omx_video_dec_handle_dynamic_change (GstOMXVideoDec * self,
+    GstOMXBuffer * buf);
+static gboolean gst_omx_video_dec_handle_dynamic_change_default (GstOMXVideoDec
+    * self, GstOMXBuffer * buf);
 
 enum
 {
@@ -174,7 +178,8 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
           "Whether or not to use lossy image compression function",
           FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
           GST_PARAM_MUTABLE_READY));
-
+  klass->handle_dynamic_change =
+      GST_DEBUG_FUNCPTR (gst_omx_video_dec_handle_dynamic_change_default);
 }
 
 static void
@@ -492,13 +497,18 @@ gst_omx_video_dec_fill_buffer (GstOMXVideoDec * self,
   gboolean ret = FALSE;
   GstVideoFrame frame;
 
-  if (vinfo->width != port_def->format.video.nFrameWidth ||
-      vinfo->height != port_def->format.video.nFrameHeight) {
-    GST_ERROR_OBJECT (self, "Resolution do not match: port=%ux%u vinfo=%dx%d",
-        (guint) port_def->format.video.nFrameWidth,
-        (guint) port_def->format.video.nFrameHeight,
-        vinfo->width, vinfo->height);
-    goto done;
+  if (self->dynamic_change) {
+    GST_DEBUG_OBJECT (self,
+        "Resolution will not match in cases of enable-crop and dynamic change in src pad");
+  } else {
+    if (vinfo->width != port_def->format.video.nFrameWidth ||
+        vinfo->height != port_def->format.video.nFrameHeight) {
+      GST_ERROR_OBJECT (self, "Resolution do not match: port=%ux%u vinfo=%dx%d",
+          (guint) port_def->format.video.nFrameWidth,
+          (guint) port_def->format.video.nFrameHeight,
+          vinfo->width, vinfo->height);
+      goto done;
+    }
   }
 
 /* Try using gst_video_frame_map() before use gst_buffer_map() because
@@ -1544,6 +1554,12 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
   GST_DEBUG_OBJECT (self, "Size of output port buffer: 0x%08x",
       buf->omx_buf->nAllocLen);
 
+  /* Update caps based on dynamic changing */
+  if (!gst_omx_video_dec_handle_dynamic_change (self, buf)) {
+    gst_omx_port_release_buffer (port, buf);
+    goto caps_failed;
+  }
+
   /* This prevents a deadlock between the srcpad stream
    * lock and the videocodec stream lock, if ::reset()
    * is called at the wrong time
@@ -1865,6 +1881,9 @@ gst_omx_video_dec_start (GstVideoDecoder * decoder)
 
   self->last_upstream_ts = 0;
   self->downstream_flow_ret = GST_FLOW_OK;
+  self->dynamic_width = 0;
+  self->dynamic_height = 0;
+  self->dynamic_change = FALSE;
 
   return TRUE;
 }
@@ -2894,6 +2913,7 @@ gst_omx_video_dec_decide_allocation (GstVideoDecoder * bdec, GstQuery * query)
       self->out_port_pool = NULL;
     } else {
       GST_OMX_BUFFER_POOL (self->out_port_pool)->allocating = FALSE;
+      GST_OMX_BUFFER_POOL (self->out_port_pool)->deactivated = FALSE;
     }
     if (update_pool)
       gst_query_set_nth_allocation_pool (query, 0, self->out_port_pool,
@@ -2982,3 +3002,108 @@ gst_omx_video_dec_get_property (GObject * object, guint prop_id,
       break;
   }
 }
+static gboolean
+gst_omx_video_dec_handle_dynamic_change (GstOMXVideoDec * self,
+    GstOMXBuffer * buf)
+{
+  GstOMXVideoDecClass *klass = GST_OMX_VIDEO_DEC_GET_CLASS (self);
+  gboolean ret = TRUE;
+
+  if (klass->handle_dynamic_change != NULL) {
+    ret = klass->handle_dynamic_change (self, buf);
+  }
+  return ret;
+}
+
+static gboolean
+gst_omx_video_dec_handle_dynamic_change_default (GstOMXVideoDec * self,
+    GstOMXBuffer * buf)
+{
+  GstVideoCodecState *state;
+  OMX_PARAM_PORTDEFINITIONTYPE port_def;
+  GstVideoFormat format;
+  GstOMXVideoDecClass *klass = GST_OMX_VIDEO_DEC_GET_CLASS (self);
+  gboolean have_change = FALSE;
+
+  GST_VIDEO_DECODER_STREAM_LOCK (self);
+
+  gst_omx_port_get_port_definition (self->dec_out_port, &port_def);
+  g_assert (port_def.format.video.eCompressionFormat == OMX_VIDEO_CodingUnused);
+
+  format =
+      gst_omx_video_get_format_from_omx (port_def.format.video.eColorFormat);
+
+  /* Fixme: Now, not care for framerate and pixel-aspect-ratio */
+  state = gst_video_decoder_get_output_state (GST_VIDEO_DECODER (self));
+
+  if ((!state) || ((format != GST_VIDEO_FORMAT_UNKNOWN)
+          && (format != state->info.finfo->format))) {
+    self->dynamic_change = TRUE;
+    have_change = TRUE;
+  }
+
+  if (self->dynamic_width == 0)
+    self->dynamic_width = port_def.format.video.nFrameWidth;
+
+  if (self->dynamic_width != state->info.width) {
+    self->dynamic_change = TRUE;
+    have_change = TRUE;
+  }
+
+  if (self->dynamic_height == 0)
+    self->dynamic_height = port_def.format.video.nFrameHeight;
+
+  if (self->dynamic_height != state->info.height) {
+    self->dynamic_change = TRUE;
+    have_change = TRUE;
+  }
+
+  /* Fixme: Not change caps in case enable-crop=true */
+  if (have_change == TRUE) {
+
+    /* Deactivate omxbuffer pool to reconfigure when caps change */
+    if ((self->no_copy == TRUE) || (self->use_dmabuf == TRUE)) {
+      if (gst_buffer_pool_is_active (self->out_port_pool)) {
+        if (!gst_buffer_pool_set_active (self->out_port_pool, FALSE)) {
+		  
+          GST_ERROR_OBJECT (self,
+              "Fail to deactivate omxbufferpool in dynamic change");
+          gst_video_codec_state_unref (state);
+
+          GST_VIDEO_DECODER_STREAM_UNLOCK (self);
+          return FALSE;
+        }
+        GST_OMX_BUFFER_POOL (self->out_port_pool)->deactivated = TRUE;
+      }
+    }
+
+    GST_LOG_OBJECT (self, "Old caps: %" GST_PTR_FORMAT,
+        gst_pad_get_current_caps (GST_VIDEO_DECODER_SRC_PAD (self)));
+    state = gst_video_decoder_set_output_state (GST_VIDEO_DECODER (self),
+        format, self->dynamic_width, self->dynamic_height, self->input_state);
+    /* Take framerate and pixel-aspect-ratio from sinkpad caps */
+    if (klass->cdata.hacks & GST_OMX_HACK_DEFAULT_PIXEL_ASPECT_RATIO) {
+      /* Set pixel-aspect-ratio is 1/1. It means that always keep
+       * original image when display   */
+      state->info.par_d = state->info.par_n;
+    }
+
+    if (!gst_video_decoder_negotiate (GST_VIDEO_DECODER (self))) {
+      GST_ERROR_OBJECT (self, "Cannot re-negotiate with new output state");
+      gst_video_codec_state_unref (state);
+
+      GST_VIDEO_DECODER_STREAM_UNLOCK (self);
+      return FALSE;
+    }
+    GST_DEBUG_OBJECT (self, "New caps: %" GST_PTR_FORMAT,
+        gst_pad_get_current_caps (GST_VIDEO_DECODER_SRC_PAD (self)));
+  }
+  /* Reset for dynamic width and height */
+  self->dynamic_width = 0;
+  self->dynamic_height = 0;
+
+  gst_video_codec_state_unref (state);
+
+  GST_VIDEO_DECODER_STREAM_UNLOCK (self);
+  return TRUE;
+}
diff --git a/omx/gstomxvideodec.h b/omx/gstomxvideodec.h
index 76823ad..a6e5dc8 100644
--- a/omx/gstomxvideodec.h
+++ b/omx/gstomxvideodec.h
@@ -93,6 +93,10 @@ struct _GstOMXVideoDec
   gboolean lossy_compress;
   /* TRUE when set_property() runs */
   gboolean has_set_property;
+  /* Enabled when output caps re-negotiate */
+  gboolean dynamic_change;
+  gint dynamic_width;
+  gint dynamic_height;
 };
 
 struct _GstOMXVideoDecClass
@@ -104,6 +108,7 @@ struct _GstOMXVideoDecClass
   gboolean (*is_format_change) (GstOMXVideoDec * self, GstOMXPort * port, GstVideoCodecState * state);
   gboolean (*set_format)       (GstOMXVideoDec * self, GstOMXPort * port, GstVideoCodecState * state);
   GstFlowReturn (*prepare_frame)   (GstOMXVideoDec * self, GstVideoCodecFrame *frame);
+  gboolean (*handle_dynamic_change) (GstOMXVideoDec * dec, GstOMXBuffer *buf);
 };
 
 GType gst_omx_video_dec_get_type (void);
-- 
2.7.4

