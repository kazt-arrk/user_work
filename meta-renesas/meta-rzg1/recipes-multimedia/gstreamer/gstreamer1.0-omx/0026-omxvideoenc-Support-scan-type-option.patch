From 41801906b72f2aceead88cec98edd610685b70cd Mon Sep 17 00:00:00 2001
From: Anh Ha <anh.ha.wz@rvc.renesas.com>
Date: Thu, 2 Nov 2017 13:31:44 +0700
Subject: [PATCH 26/41] omxvideoenc: Support scan-type option

This option allows encoder to choose video scantype (progressive or
interlace) of output

Currently, there are 3 choices:
0: Progressive (default)
4: Interlaced Top Field First
5: Interlaced Bottom Field First

refs #138391
Signed-off-by: Anh Ha <anh.ha.wz@rvc.renesas.com>
---
 configure.ac         |  6 +++++
 omx/gstomxvideoenc.c | 72 +++++++++++++++++++++++++++++++++++++++++++++++++++-
 omx/gstomxvideoenc.h |  2 ++
 3 files changed, 79 insertions(+), 1 deletion(-)

diff --git a/configure.ac b/configure.ac
index abbd0f3..0f6db30 100644
--- a/configure.ac
+++ b/configure.ac
@@ -305,6 +305,12 @@ AC_CHECK_HEADER([OMXR_Extension_audio.h],
            [],
            [AC_INCLUDES_DEFAULT])
 
+dnl check OMXR_Extension_vecmn.h
+AC_CHECK_HEADER([OMXR_Extension_vecmn.h],
+           [AC_DEFINE(HAVE_VIDEOENC_EXT, 1, [Define if you have OMXR_Extension_vecmn.h header])],
+           [],
+           [AC_INCLUDES_DEFAULT])
+
 dnl *** set variables based on configure arguments ***
 
 dnl set license and copyright notice
diff --git a/omx/gstomxvideoenc.c b/omx/gstomxvideoenc.c
index e63ebeb..1baed39 100644
--- a/omx/gstomxvideoenc.c
+++ b/omx/gstomxvideoenc.c
@@ -34,6 +34,9 @@
 #include <OMX_Broadcom.h>
 #include <OMX_Index.h>
 #endif
+#if defined (USE_OMX_TARGET_RCAR) && defined (HAVE_VIDEOENC_EXT)
+#include "OMXR_Extension_vecmn.h"
+#endif
 
 GST_DEBUG_CATEGORY_STATIC (gst_omx_video_enc_debug_category);
 #define GST_CAT_DEFAULT gst_omx_video_enc_debug_category
@@ -62,6 +65,31 @@ gst_omx_video_enc_control_rate_get_type (void)
   return qtype;
 }
 
+#define GST_TYPE_OMX_VIDEO_ENC_SCAN_TYPE (gst_omx_video_enc_get_scantype ())
+static GType
+gst_omx_video_enc_get_scantype (void)
+{
+  static GType qtype = 0;
+
+  if (qtype == 0) {
+    static const GEnumValue values[] = {
+#if defined (USE_OMX_TARGET_RCAR) && defined (HAVE_VIDEOENC_EXT)
+      {OMXR_MC_VIDEO_MemAllocFrame, "Progressive", "progressive"},
+      {OMXR_MC_VIDEO_MemAllocFieldTff, "Interlaced Top Field First",
+          "interlaced-Tff"},
+      {OMXR_MC_VIDEO_MemAllocFieldBff, "Interlaced Bottom Field First",
+          "interlaced-Bff"},
+#endif
+      {0xffffffff, "Component Default", "default"},
+      {0, NULL, NULL},
+    };
+
+    qtype = g_enum_register_static ("GstOMXVideoEncScanType", values);
+  }
+  return qtype;
+}
+
+
 /* prototypes */
 static void gst_omx_video_enc_finalize (GObject * object);
 static void gst_omx_video_enc_set_property (GObject * object, guint prop_id,
@@ -101,7 +129,8 @@ enum
   PROP_TARGET_BITRATE,
   PROP_QUANT_I_FRAMES,
   PROP_QUANT_P_FRAMES,
-  PROP_QUANT_B_FRAMES
+  PROP_QUANT_B_FRAMES,
+  PROP_SCAN_TYPE
 };
 
 /* FIXME: Better defaults */
@@ -110,6 +139,7 @@ enum
 #define GST_OMX_VIDEO_ENC_QUANT_I_FRAMES_DEFAULT (0xffffffff)
 #define GST_OMX_VIDEO_ENC_QUANT_P_FRAMES_DEFAULT (0xffffffff)
 #define GST_OMX_VIDEO_ENC_QUANT_B_FRAMES_DEFAULT (0xffffffff)
+#define GST_OMX_VIDEO_ENC_SCAN_TYPE_DEFAULT (0xffffffff)
 
 /* class initialization */
 #define do_init \
@@ -169,6 +199,13 @@ gst_omx_video_enc_class_init (GstOMXVideoEncClass * klass)
           0, G_MAXUINT, GST_OMX_VIDEO_ENC_QUANT_B_FRAMES_DEFAULT,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
           GST_PARAM_MUTABLE_READY));
+  g_object_class_install_property (gobject_class, PROP_SCAN_TYPE,
+      g_param_spec_enum ("scan-type", "Scan Type",
+          "Encode Scan Type method",
+          GST_TYPE_OMX_VIDEO_ENC_SCAN_TYPE,
+          GST_OMX_VIDEO_ENC_SCAN_TYPE_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
 
   element_class->change_state =
       GST_DEBUG_FUNCPTR (gst_omx_video_enc_change_state);
@@ -204,6 +241,7 @@ gst_omx_video_enc_init (GstOMXVideoEnc * self)
   self->quant_i_frames = GST_OMX_VIDEO_ENC_QUANT_I_FRAMES_DEFAULT;
   self->quant_p_frames = GST_OMX_VIDEO_ENC_QUANT_P_FRAMES_DEFAULT;
   self->quant_b_frames = GST_OMX_VIDEO_ENC_QUANT_B_FRAMES_DEFAULT;
+  self->scan_type = GST_OMX_VIDEO_ENC_SCAN_TYPE_DEFAULT;
 
   g_mutex_init (&self->drain_lock);
   g_cond_init (&self->drain_cond);
@@ -352,6 +390,32 @@ gst_omx_video_enc_open (GstVideoEncoder * encoder)
 
       }
     }
+    if (self->scan_type != 0xffffffff) {
+#if defined (USE_OMX_TARGET_RCAR) && defined (HAVE_VIDEOENC_EXT)
+      OMXR_MC_VIDEO_PARAM_PICTURE_MEMORY_ALLOCTYPE alloctype_param;
+      GST_OMX_INIT_STRUCT (&alloctype_param);
+      alloctype_param.nPortIndex = self->enc_out_port->index;
+      GST_DEBUG_OBJECT (self, "Setting memory alloc type parameter");
+
+      err = gst_omx_component_get_parameter (self->enc,
+          OMXR_MC_IndexParamVideoPictureMemoryAlloc, &alloctype_param);
+      if (err == OMX_ErrorNone) {
+        alloctype_param.eMemoryAlloc = self->scan_type;
+        err =
+            gst_omx_component_set_parameter (self->enc,
+            OMXR_MC_IndexParamVideoPictureMemoryAlloc, &alloctype_param);
+        if (err != OMX_ErrorNone) {
+          GST_ERROR_OBJECT (self,
+              "Failed to set memory alloc type: %s (0x%08x)",
+              gst_omx_error_to_string (err), err);
+          return FALSE;
+        }
+      }
+#else
+      GST_ERROR_OBJECT (self,
+          "scan-type is invalid now due to MC does not support");
+#endif
+    }
   }
 
   return TRUE;
@@ -447,6 +511,9 @@ gst_omx_video_enc_set_property (GObject * object, guint prop_id,
     case PROP_QUANT_B_FRAMES:
       self->quant_b_frames = g_value_get_uint (value);
       break;
+    case PROP_SCAN_TYPE:
+      self->scan_type = g_value_get_enum (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -475,6 +542,9 @@ gst_omx_video_enc_get_property (GObject * object, guint prop_id, GValue * value,
     case PROP_QUANT_B_FRAMES:
       g_value_set_uint (value, self->quant_b_frames);
       break;
+    case PROP_SCAN_TYPE:
+      g_value_set_enum (value, self->scan_type);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
diff --git a/omx/gstomxvideoenc.h b/omx/gstomxvideoenc.h
index 176ea99..8eb6225 100644
--- a/omx/gstomxvideoenc.h
+++ b/omx/gstomxvideoenc.h
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
  *   Author: Sebastian Dr√∂ge <sebastian.droege@collabora.co.uk>, Collabora Ltd.
+ * Copyright (C) 2017, Renesas Electronics Corporation
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -73,6 +74,7 @@ struct _GstOMXVideoEnc
   guint32 quant_i_frames;
   guint32 quant_p_frames;
   guint32 quant_b_frames;
+  guint32 scan_type;
 
   GstFlowReturn downstream_flow_ret;
 };
-- 
2.7.4

