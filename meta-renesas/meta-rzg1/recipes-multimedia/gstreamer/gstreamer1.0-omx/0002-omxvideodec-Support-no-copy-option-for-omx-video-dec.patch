From 645e4e2842de52c02144a469d97d0bbb1fe6930a Mon Sep 17 00:00:00 2001
From: Anh Ha <anh.ha.wz@rvc.renesas.com>
Date: Wed, 1 Nov 2017 19:03:42 +0700
Subject: [PATCH 02/41] omxvideodec: Support no-copy option for omx video
 decoders

When enable no-copy option (no-copy=true), omx video decoders
will share memory contain OMXBuffer with downstream.

refs #138391
Signed-off-by: Anh Ha <anh.ha.wz@rvc.renesas.com>
---
 omx/gstomxvideodec.c | 177 +++++++++++++++++++++++++++++++++++++++++++++++----
 omx/gstomxvideodec.h |   5 ++
 2 files changed, 170 insertions(+), 12 deletions(-)

diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 4e14d79..60b6394 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -83,10 +83,15 @@ static OMX_ERRORTYPE gst_omx_video_dec_allocate_output_buffers (GstOMXVideoDec *
     self);
 static OMX_ERRORTYPE gst_omx_video_dec_deallocate_output_buffers (GstOMXVideoDec
     * self);
+static void gst_omx_video_dec_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec);
+static void gst_omx_video_dec_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec);
 
 enum
 {
-  PROP_0
+  PROP_0,
+  PROP_NO_COPY
 };
 
 /* class initialization */
@@ -107,6 +112,8 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
   GstVideoDecoderClass *video_decoder_class = GST_VIDEO_DECODER_CLASS (klass);
 
   gobject_class->finalize = gst_omx_video_dec_finalize;
+  gobject_class->set_property = gst_omx_video_dec_set_property;
+  gobject_class->get_property = gst_omx_video_dec_get_property;
 
   element_class->change_state =
       GST_DEBUG_FUNCPTR (gst_omx_video_dec_change_state);
@@ -134,6 +141,12 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
       "video/x-raw, "
       "width = " GST_VIDEO_SIZE_RANGE ", "
       "height = " GST_VIDEO_SIZE_RANGE ", " "framerate = " GST_VIDEO_FPS_RANGE;
+
+  g_object_class_install_property (gobject_class, PROP_NO_COPY,
+      g_param_spec_boolean ("no-copy", "No copy",
+          "Whether or not to transfer decoded data without copy",
+          FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
 }
 
 static void
@@ -146,6 +159,7 @@ gst_omx_video_dec_init (GstOMXVideoDec * self)
 
   g_mutex_init (&self->drain_lock);
   g_cond_init (&self->drain_cond);
+  self->no_copy = FALSE;
 }
 
 static gboolean
@@ -1353,6 +1367,49 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
         err = gst_omx_port_mark_reconfigured (port);
         if (err != OMX_ErrorNone)
           goto reconfigure_error;
+
+        if (self->no_copy == TRUE) {
+          /* Re-create new out_port_pool. The old one has been freed when
+           * deallocate output buffers */
+          self->out_port_pool =
+              gst_omx_buffer_pool_new (GST_ELEMENT_CAST (self), self->dec,
+              port);
+
+          if (gst_pad_has_current_caps (GST_VIDEO_DECODER_SRC_PAD (self))) {
+            GstStructure *config;
+            GstCaps *caps;
+
+            /* Reconfigure for pool when negotiated for caps. This is support
+             * for reconfigure due to caps change.
+             * If caps haven't negotiated yet, configure for pool will be done
+             * on decide_allocation */
+
+            caps = gst_pad_get_current_caps (GST_VIDEO_DECODER_SRC_PAD (self));
+            config = gst_buffer_pool_get_config (self->out_port_pool);
+            gst_buffer_pool_config_add_option (config,
+                GST_BUFFER_POOL_OPTION_VIDEO_META);
+            gst_buffer_pool_config_set_params (config, caps,
+                self->dec_out_port->port_def.nBufferSize,
+                self->dec_out_port->port_def.nBufferCountActual,
+                self->dec_out_port->port_def.nBufferCountActual);
+            gst_caps_unref (caps);
+            if (!gst_buffer_pool_set_config (self->out_port_pool, config)) {
+              GST_ERROR_OBJECT (self, "Failed to set config on internal pool");
+              gst_object_unref (self->out_port_pool);
+              self->out_port_pool = NULL;
+              goto reconfigure_error;
+            }
+            GST_OMX_BUFFER_POOL (self->out_port_pool)->allocating = TRUE;
+            if (!gst_buffer_pool_set_active (self->out_port_pool, TRUE)) {
+              GST_INFO_OBJECT (self, "Failed to activate internal pool");
+              gst_object_unref (self->out_port_pool);
+              self->out_port_pool = NULL;
+              goto reconfigure_error;
+            } else {
+              GST_OMX_BUFFER_POOL (self->out_port_pool)->allocating = FALSE;
+            }
+          }
+        }
       } else
 #endif
       {
@@ -2083,6 +2140,13 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
               5 * GST_SECOND) != OMX_ErrorNone)
         return FALSE;
     }
+    if (self->no_copy == TRUE) {
+      /* Re-create buffer pool for output port. The old one has been
+       * freed when deallocate output buffers */
+      self->out_port_pool =
+          gst_omx_buffer_pool_new (GST_ELEMENT_CAST (self), self->dec,
+          self->dec_out_port);
+    }
 
     if (gst_omx_port_wait_enabled (self->dec_in_port,
             5 * GST_SECOND) != OMX_ErrorNone)
@@ -2121,6 +2185,13 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
         return FALSE;
     }
 
+    if (self->no_copy == TRUE) {
+      /* Create buffer pool for output port */
+      self->out_port_pool =
+          gst_omx_buffer_pool_new (GST_ELEMENT_CAST (self), self->dec,
+          self->dec_out_port);
+    }
+
     if (gst_omx_component_get_state (self->dec,
             GST_CLOCK_TIME_NONE) != OMX_StateIdle)
       return FALSE;
@@ -2613,6 +2684,7 @@ gst_omx_video_dec_decide_allocation (GstVideoDecoder * bdec, GstQuery * query)
 {
   GstBufferPool *pool;
   GstStructure *config;
+  GstOMXVideoDec *self;
 
 #if defined (USE_OMX_TARGET_RPI) && defined (HAVE_GST_GL)
   {
@@ -2658,21 +2730,102 @@ gst_omx_video_dec_decide_allocation (GstVideoDecoder * bdec, GstQuery * query)
   }
 #endif
 
-  if (!GST_VIDEO_DECODER_CLASS
-      (gst_omx_video_dec_parent_class)->decide_allocation (bdec, query))
-    return FALSE;
-
-  g_assert (gst_query_get_n_allocation_pools (query) > 0);
-  gst_query_parse_nth_allocation_pool (query, 0, &pool, NULL, NULL, NULL);
-  g_assert (pool != NULL);
+  /* Set up buffer pool and notify it to parent class */
+  self = GST_OMX_VIDEO_DEC (bdec);
+  if (self->out_port_pool) {
+    GstCaps *caps;
+    gboolean update_pool = FALSE;
 
-  config = gst_buffer_pool_get_config (pool);
-  if (gst_query_find_allocation_meta (query, GST_VIDEO_META_API_TYPE, NULL)) {
+    if (gst_query_get_n_allocation_pools (query) > 0) {
+      /* If downstream propose pool in query, update that pool base on
+       * omxbufferpool's parameters instead of add new in query */
+      update_pool = TRUE;
+    }
+    /* Set pool parameters to our own configuration */
+    config = gst_buffer_pool_get_config (self->out_port_pool);
     gst_buffer_pool_config_add_option (config,
         GST_BUFFER_POOL_OPTION_VIDEO_META);
+    gst_query_parse_allocation (query, &caps, NULL);
+    gst_buffer_pool_config_set_params (config, caps,
+        self->dec_out_port->port_def.nBufferSize,
+        self->dec_out_port->port_def.nBufferCountActual,
+        self->dec_out_port->port_def.nBufferCountActual);
+    if (!gst_buffer_pool_set_config (self->out_port_pool, config)) {
+      GST_ERROR_OBJECT (self, "Failed to set config on internal pool");
+      gst_object_unref (self->out_port_pool);
+      self->out_port_pool = NULL;
+      return FALSE;
+    }
+    GST_OMX_BUFFER_POOL (self->out_port_pool)->allocating = TRUE;
+    /* This now allocates all the buffers */
+    if (!gst_buffer_pool_set_active (self->out_port_pool, TRUE)) {
+      GST_INFO_OBJECT (self, "Failed to activate internal pool");
+      gst_object_unref (self->out_port_pool);
+      self->out_port_pool = NULL;
+    } else {
+      GST_OMX_BUFFER_POOL (self->out_port_pool)->allocating = FALSE;
+    }
+    if (update_pool)
+      gst_query_set_nth_allocation_pool (query, 0, self->out_port_pool,
+          self->dec_out_port->port_def.nBufferSize,
+          self->dec_out_port->port_def.nBufferCountActual,
+          self->dec_out_port->port_def.nBufferCountActual);
+    else
+      gst_query_add_allocation_pool (query, self->out_port_pool,
+          self->dec_out_port->port_def.nBufferSize,
+          self->dec_out_port->port_def.nBufferCountActual,
+          self->dec_out_port->port_def.nBufferCountActual);
+  } else {
+    if (!GST_VIDEO_DECODER_CLASS
+        (gst_omx_video_dec_parent_class)->decide_allocation (bdec, query))
+      return FALSE;
+
+    g_assert (gst_query_get_n_allocation_pools (query) > 0);
+    gst_query_parse_nth_allocation_pool (query, 0, &pool, NULL, NULL, NULL);
+    g_assert (pool != NULL);
+
+    config = gst_buffer_pool_get_config (pool);
+    if (gst_query_find_allocation_meta (query, GST_VIDEO_META_API_TYPE, NULL)) {
+      gst_buffer_pool_config_add_option (config,
+          GST_BUFFER_POOL_OPTION_VIDEO_META);
+    }
+    gst_buffer_pool_set_config (pool, config);
+    gst_object_unref (pool);
   }
-  gst_buffer_pool_set_config (pool, config);
-  gst_object_unref (pool);
 
   return TRUE;
 }
+
+static void
+gst_omx_video_dec_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstOMXVideoDec *self = GST_OMX_VIDEO_DEC (object);
+
+  switch (prop_id) {
+    case PROP_NO_COPY:
+    {
+      self->no_copy = g_value_get_boolean (value);
+      break;
+    }
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_omx_video_dec_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstOMXVideoDec *self = GST_OMX_VIDEO_DEC (object);
+
+  switch (prop_id) {
+    case PROP_NO_COPY:
+      g_value_set_boolean (value, self->no_copy);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
diff --git a/omx/gstomxvideodec.h b/omx/gstomxvideodec.h
index c79b66d..6c4d83b 100644
--- a/omx/gstomxvideodec.h
+++ b/omx/gstomxvideodec.h
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
  *   Author: Sebastian Dröge <sebastian.droege@collabora.co.uk>, Collabora Ltd.
+ * Copyright (C) 2017, Renesas Electronics Corporation
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -80,6 +81,10 @@ struct _GstOMXVideoDec
   GstOMXPort *egl_in_port, *egl_out_port;
   gboolean eglimage;
 #endif
+  /* Set TRUE to use buffer of omxbufferpool to transfer data to
+   * downstream
+   */
+  gboolean no_copy;
 };
 
 struct _GstOMXVideoDecClass
-- 
2.7.4

