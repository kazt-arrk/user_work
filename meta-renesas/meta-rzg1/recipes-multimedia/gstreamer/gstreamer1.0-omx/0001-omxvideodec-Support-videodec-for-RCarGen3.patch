From 5fdab35286ae3a7ccec28e442f9804131b995d10 Mon Sep 17 00:00:00 2001
From: Anh Ha <anh.ha.wz@rvc.renesas.com>
Date: Wed, 1 Nov 2017 19:01:04 +0700
Subject: [PATCH 01/41] omxvideodec: Support videodec for RCarGen3

Make video decoders can work on RCarGen3 by reconfiguring output port
in case video stream size larger than default output allocation(128x128)
Allocation affer reconfigure will align for page size.

refs #138391
Signed-off-by: Anh Ha <anh.ha.wz@rvc.renesas.com>
---
 omx/gstomxvideodec.c | 94 +++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 90 insertions(+), 4 deletions(-)

diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 2fecb8b..4e14d79 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -3,6 +3,7 @@
  *   Author: Sebastian Dröge <sebastian.droege@collabora.co.uk>, Collabora Ltd.
  * Copyright (C) 2013, Collabora Ltd.
  *   Author: Sebastian Dröge <sebastian.droege@collabora.co.uk>
+ * Copyright (C) 2017, Renesas Electronics Corporation
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -51,6 +52,7 @@
 #include "gstomxbufferpool.h"
 #include "gstomxvideo.h"
 #include "gstomxvideodec.h"
+#include <unistd.h>             /* getpagesize() */
 
 GST_DEBUG_CATEGORY_STATIC (gst_omx_video_dec_debug_category);
 #define GST_CAT_DEFAULT gst_omx_video_dec_debug_category
@@ -1294,10 +1296,71 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
     }
 
     if (acq_return == GST_OMX_ACQUIRE_BUFFER_RECONFIGURE) {
-      /* We have the possibility to reconfigure everything now */
-      err = gst_omx_video_dec_reconfigure_output_port (self);
-      if (err != OMX_ErrorNone)
-        goto reconfigure_error;
+#ifdef USE_OMX_TARGET_RCAR
+      gboolean use_target_RCar = TRUE;
+      if (use_target_RCar) {
+        gboolean was_enabled = TRUE;
+        if (!gst_omx_port_is_enabled (port)) {
+          guint plane_size;
+          gint page_size = getpagesize ();
+
+          /* Reconfigure port def to make output allocation align for pagesize */
+          gst_omx_port_get_port_definition (port, &port_def);
+          GST_DEBUG_OBJECT (self, "nStridexnSliceHeight = %dx%d",
+              port_def.format.video.nStride,
+              port_def.format.video.nSliceHeight);
+          plane_size =
+              port_def.format.video.nStride *
+              port_def.format.video.nSliceHeight;
+          if (plane_size % page_size) {
+            if (port_def.format.video.nStride % 64)
+              port_def.format.video.nStride =
+                  GST_ROUND_UP_64 (port_def.format.video.nStride);
+            if (port_def.format.video.nSliceHeight % 64)
+              port_def.format.video.nSliceHeight =
+                  GST_ROUND_UP_64 (port_def.format.video.nSliceHeight);
+
+            err = gst_omx_port_update_port_definition (self->dec_out_port,
+                &port_def);
+            if (err != OMX_ErrorNone)
+              goto reconfigure_error;
+            GST_DEBUG_OBJECT (self,
+                "After reconfigure nStridexnSliceHeight = %dx%d",
+                port->port_def.format.video.nStride,
+                port->port_def.format.video.nSliceHeight);
+          }
+
+          err = gst_omx_port_set_enabled (port, TRUE);
+          if (err != OMX_ErrorNone)
+            goto reconfigure_error;
+          was_enabled = FALSE;
+        }
+
+        /* Re-allocate output buffer */
+        err = gst_omx_port_allocate_buffers (port);
+        if (err != OMX_ErrorNone)
+          goto reconfigure_error;
+
+        if (!was_enabled) {
+          err = gst_omx_port_wait_enabled (port, 2 * GST_SECOND);
+          if (err != OMX_ErrorNone)
+            goto reconfigure_error;
+        }
+        err = gst_omx_port_populate (port);
+        if (err != OMX_ErrorNone)
+          goto reconfigure_error;
+
+        err = gst_omx_port_mark_reconfigured (port);
+        if (err != OMX_ErrorNone)
+          goto reconfigure_error;
+      } else
+#endif
+      {
+        /* We have the possibility to reconfigure everything now */
+        err = gst_omx_video_dec_reconfigure_output_port (self);
+        if (err != OMX_ErrorNone)
+          goto reconfigure_error;
+      }
     } else {
       /* Just update caps */
       GST_VIDEO_DECODER_STREAM_LOCK (self);
@@ -1351,6 +1414,8 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
   }
 
   g_assert (acq_return == GST_OMX_ACQUIRE_BUFFER_OK);
+  GST_DEBUG_OBJECT (self, "Size of output port buffer: 0x%08x",
+      buf->omx_buf->nAllocLen);
 
   /* This prevents a deadlock between the srcpad stream
    * lock and the videocodec stream lock, if ::reset()
@@ -1978,6 +2043,21 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
   }
 
   GST_DEBUG_OBJECT (self, "Updating outport port definition");
+#ifdef USE_OMX_TARGET_RCAR
+  if (!needs_disable) {
+    OMX_PARAM_PORTDEFINITIONTYPE out_port_def;
+
+    /* Initialize default output allocation align for page size
+     * Choose 128x128 because some decoders support 80 as minimum setting.*/
+    gst_omx_port_get_port_definition (self->dec_out_port, &out_port_def);
+    out_port_def.format.video.nStride = 128;
+    out_port_def.format.video.nSliceHeight = 128;
+    if (gst_omx_port_update_port_definition (self->dec_out_port,
+            &out_port_def) != OMX_ErrorNone)
+      return FALSE;
+  }
+  /* To make source code flexible, accept getting port_def param again */
+#endif
   if (gst_omx_port_update_port_definition (self->dec_out_port,
           NULL) != OMX_ErrorNone)
     return FALSE;
@@ -2058,6 +2138,12 @@ gst_omx_video_dec_set_format (GstVideoDecoder * decoder,
   gst_omx_port_set_flushing (self->dec_in_port, 5 * GST_SECOND, FALSE);
   gst_omx_port_set_flushing (self->dec_out_port, 5 * GST_SECOND, FALSE);
 
+  /* Populate (FillThisBuffer) all output buffers to the component so
+   * that gst_omx_video_dec_loop() waits to get output buffers properly.
+   */
+  if (gst_omx_port_populate (self->dec_out_port) != OMX_ErrorNone)
+    return FALSE;
+
   if (gst_omx_component_get_last_error (self->dec) != OMX_ErrorNone) {
     GST_ERROR_OBJECT (self, "Component in error state: %s (0x%08x)",
         gst_omx_component_get_last_error_string (self->dec),
-- 
2.7.4

