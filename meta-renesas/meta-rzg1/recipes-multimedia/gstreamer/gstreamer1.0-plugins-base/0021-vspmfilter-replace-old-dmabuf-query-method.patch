From 6a1ad6d5448ec02b7a90018f53fe2a2cf7a589fe Mon Sep 17 00:00:00 2001
From: Binh Nguyen <binh.nguyen.uw@rvc.renesas.com>
Date: Wed, 25 Jul 2018 19:12:55 +0700
Subject: [PATCH] vspmfilter: replace old dmabuf query method

Both omxh264dec and waylansink removed query method for dmabuf. They
now support getting dmabuf_id directly from gst-buffer. So it it needed to
modify vspmfilter to work compatible with them.

This commit remove old query method from vspmfilter. DMABUF now supported
when vspmfilter allocate output buffer (mode outuf-alloc=true)

Signed-off-by: Binh Nguyen <binh.nguyen.uw@rvc.renesas.com>
---
 gst/vspmfilter/gstvspmfilter.c | 844 +++--------------------------------------
 1 file changed, 49 insertions(+), 795 deletions(-)

diff --git a/gst/vspmfilter/gstvspmfilter.c b/gst/vspmfilter/gstvspmfilter.c
index b0c6837..76cd4ba 100644
--- a/gst/vspmfilter/gstvspmfilter.c
+++ b/gst/vspmfilter/gstvspmfilter.c
@@ -131,7 +131,6 @@ struct _GstBaseTransformPrivate
 enum
 {
   PROP_0,
-  PROP_VSPM_DMABUF,
   PROP_VSPM_OUTBUF
 };
 
@@ -522,43 +521,25 @@ gst_vspm_filter_set_info (GstVideoFilter * filter,
 
   GST_DEBUG ("reconfigured %d %d", GST_VIDEO_INFO_FORMAT (in_info),
       GST_VIDEO_INFO_FORMAT (out_info));
-  if(space->use_dmabuf){
-    switch (GST_VIDEO_INFO_FORMAT (out_info)) {
-      case GST_VIDEO_FORMAT_NV12:
-        for (i = 0; i < VSPM_BUFFERS; i++){
-          GstBuffer *buf;
-          gsize offset[4] = { 0, };
-          gint stride[4] = { 0, };
-          buf = gst_buffer_new();
-          g_ptr_array_add (vspm_outbuf->buf_array, buf);
-          offset[0] = 0;
-          offset[1] = out_info->width * out_info->height;
-          stride[0] = out_info->width;
-          stride[1] = out_info->width;
-          gst_buffer_add_video_meta_full (buf, GST_VIDEO_FRAME_FLAG_NONE,
-            GST_VIDEO_FORMAT_NV12,
-            out_info->width,
-            out_info->height,
-            2, offset, stride);
-        }
-        break;
-      default :
-              printf("ERROR : output format not supported\n");
-          break;
-    }
-  } else if(space->outbuf_allocate) {
+  if(space->outbuf_allocate) {
     GstQuery *query;
     gint vspm_used ;
     GArray *outbuf_paddr_array;
     GArray *outbuf_vaddr_array;
-    guint i, size, plane_size;
-    gsize offset[4] = { 0, };
-    gint stride[4] = { 0, };
+    guint i, j, size;
+    gsize offset[GST_VIDEO_MAX_PLANES] = { 0, };
+    gint stride[GST_VIDEO_MAX_PLANES] = { 0, };
+    guint plane_size[GST_VIDEO_MAX_PLANES] = { 0, };
+    gint dmabuf_fd[GST_VIDEO_MAX_PLANES] = { 0, };
+    gint page_offset[GST_VIDEO_MAX_PLANES];
+    gint plane_size_ext[GST_VIDEO_MAX_PLANES];;
+    gint page_size;
     guint n_planes = 0;
 
     outbuf_paddr_array = g_array_new (FALSE, FALSE, sizeof (gulong));
     outbuf_vaddr_array = g_array_new (FALSE, FALSE, sizeof (gulong));
     size = 0;
+    page_size = getpagesize ();
     n_planes = GST_VIDEO_FORMAT_INFO_N_PLANES(out_info->finfo);
 
     for (i = 0; i < n_planes; i++) {
@@ -567,14 +548,14 @@ gst_vspm_filter_set_info (GstVideoFilter * filter,
           GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (out_info->finfo, i,
               out_info->width);
 
-      plane_size = stride[i] *
+      plane_size[i] = stride[i] *
         GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT (out_info->finfo, i, out_info->height);
 
-      size += plane_size;
+      size += plane_size[i];
     }
 
     for (i = 0; i < 5; i++){
-      GstBuffer *buf;
+      GstBuffer *buf = gst_buffer_new ();;
       vspm_used = vspm_out->used;
       if (R_MM_OK == mmngr_alloc_in_user(&vspm_out->vspm[vspm_used].mmng_pid,
                                 size,
@@ -587,14 +568,44 @@ gst_vspm_filter_set_info (GstVideoFilter * filter,
                             vspm_out->vspm[vspm_used].phard_addr);
         g_array_append_val (outbuf_vaddr_array,
                             vspm_out->vspm[vspm_used].puser_virt_addr);
+
+        for (j = 0; j < n_planes; j++) {
+          gint res;
+          guint phys_addr;
+          GstMemory *mem;
+          phys_addr = (guint) vspm_out->vspm[vspm_used].phard_addr + offset[j];
+          /* Calculate offset between physical address and page boundary */
+          page_offset[j] = phys_addr & (page_size - 1);
+          /* When downstream plugins do mapping from dmabuf fd it requires
+          * mapping from boundary page and size align for page size so
+          * memory for plane must increase to handle for this case */
+          plane_size_ext[j] = GST_ROUND_UP_N (plane_size[j] + page_offset[j],
+                    page_size);
+          res =
+            mmngr_export_start_in_user (&vspm_out->vspm[vspm_used].dmabuf_pid[j],
+          plane_size_ext[j], (unsigned long) phys_addr, &dmabuf_fd[j]);
+          if (res != R_MM_OK) {
+            GST_ERROR_OBJECT (space,
+              "mmngr_export_start_in_user failed (phys_addr:0x%08x)",
+              phys_addr);
+            return GST_FLOW_ERROR;
+          }
+
+          /* Set offset's information */
+          mem = gst_dmabuf_allocator_alloc (space->allocator, dmabuf_fd[j],
+                   plane_size_ext[j]);
+          mem->offset = page_offset[j];
+          /* Only allow to access plane size */
+          mem->size = plane_size[j];
+          gst_buffer_append_memory (buf, mem);
+        }
       } else {
-        printf("MMNGR: allocation error\n");
+        GST_ERROR_OBJECT (space,
+              "mmngr_alloc_in_user failed to allocate memory (%d)",
+              size);
+        return GST_FLOW_ERROR;
       }
 
-      buf = gst_buffer_new_wrapped (
-              (gpointer)vspm_out->vspm[vspm_used].puser_virt_addr,
-              (gsize)size);
-
       g_ptr_array_add (vspm_outbuf->buf_array, buf);
       gst_buffer_add_video_meta_full (buf, GST_VIDEO_FRAME_FLAG_NONE,
         GST_VIDEO_INFO_FORMAT (out_info),
@@ -647,368 +658,6 @@ format_mismatch:
   }
 }
 
-static int buffer_get_dmabuf_fd(Vspm_mmng_ar* vspm_buff_array, GstBuffer * buffer)
-{
-  int i = vspm_buff_array->used;
-  while (i) {
-    i--;
-      if (buffer == vspm_buff_array->vspm[i].buf)
-        return vspm_buff_array->vspm[i].dmabuf_fd;
-  }
-
-  return 0;
-}
-
-static unsigned long buffer_get_dmabuf_hard_addr(Vspm_mmng_ar* vspm_buff_array, GstBuffer * buffer)
-{
-  int i = vspm_buff_array->used;
-  while (i) {
-    i--;
-    if (buffer == vspm_buff_array->vspm[i].buf)
-      return vspm_buff_array->vspm[i].phard_addr;
-  }
-
-    return 0;
-}
-
-static GstFlowReturn
-gst_vspm_filter_transform (GstBaseTransform * trans, GstBuffer * inbuf,
-    GstBuffer * outbuf)
-{
-    GstVideoFilter *filter = GST_VIDEO_FILTER_CAST (trans);
-    GstVspmFilter *space = GST_VIDEO_CONVERT_CAST (filter);
-
-    GstFlowReturn res = GST_FLOW_OK;
-    if(space->use_dmabuf) {
-        gst_buffer_ref(inbuf);
-        if (G_UNLIKELY (!filter->negotiated))
-            goto unknown_format;
-
-        res = gst_vspm_filter_transform_buffer(trans,inbuf,outbuf);
-    } else {
-        res = GST_BASE_TRANSFORM_CLASS(parent_class)->transform(trans, inbuf,outbuf);
-    }
-
-    return res;
-
-    /* ERRORS */
-unknown_format:
-  {
-    GST_ELEMENT_ERROR (filter, CORE, NOT_IMPLEMENTED, (NULL),
-        ("unknown format"));
-    return GST_FLOW_NOT_NEGOTIATED;
-  }
-}
-
-static GstBuffer *
-gst_vspmfilter_buffer_pool_create_buffer_from_dmabuf (GstVspmFilter *space,
-    gint dmabuf[GST_VIDEO_MAX_PLANES], GstAllocator * allocator, gint width,
-    gint height, gint in_stride[GST_VIDEO_MAX_PLANES], GstVideoFormat format,
-    gint n_planes)
-{
-  GstBuffer *buffer;
-  gsize offset[GST_VIDEO_MAX_PLANES] = { 0 };
-  gint stride[GST_VIDEO_MAX_PLANES] = { 0 };
-  gint i;
-  Vspm_mmng_ar *vspm_in;
-  Vspm_dmabuff vspm_buf;
-  unsigned long psize;
-
-  vspm_in = space->vspm_in;
-
-  buffer = gst_buffer_new ();
-
-  vspm_buf.buf = buffer;
-  vspm_buf.dmabuf_fd = dmabuf[0];
-  for (i = 0; i < GST_VIDEO_MAX_PLANES; i++)
-    vspm_buf.dmabuf_pid[i] = -1;
-
-  if (R_MM_OK == mmngr_import_start_in_user(&vspm_buf.dmabuf_pid[0],
-			&psize,
-			&vspm_buf.phard_addr,
-			vspm_buf.dmabuf_fd))
-  {
-    int dmabf_used = vspm_in->used;
-    vspm_in->vspm[dmabf_used] = vspm_buf;
-    vspm_in->used++;
-  }
-
-  for (i = 0; i < n_planes; i++) {
-    gst_buffer_append_memory (buffer,
-        gst_dmabuf_allocator_alloc (allocator, dmabuf[i], 0));
-
-    stride[i] = in_stride[i];
-  }
-
-  gst_buffer_add_video_meta_full (buffer, GST_VIDEO_FRAME_FLAG_NONE, format,
-      width, height, n_planes, offset, stride);
-
-  return buffer;
-}
-
-static gboolean
-gst_vspm_filter_propose_allocation (GstBaseTransform *trans, 
-                                    GstQuery *decide_query,
-                                    GstQuery *query)
-{
-  GstVspmFilter *space = GST_VIDEO_CONVERT_CAST (trans);
-  GstBufferPool *pool;
-  GstStructure *config;
-  GstCaps *caps;
-  guint size = 0;
-  gboolean need_pool;
-  gboolean ret = TRUE;
-
-  if(space->use_dmabuf) {
-    gst_query_parse_allocation (query, &caps, &need_pool);
-
-    if (caps == NULL)
-        goto no_caps;
-
-    if (need_pool) {
-        GstVideoInfo info;
-
-        if (!gst_video_info_from_caps (&info, caps))
-          goto invalid_caps;
-        GST_DEBUG_OBJECT (trans, "create new pool");
-        pool = gst_video_buffer_pool_new ();
-
-        /* the normal size of a frame */
-        size = info.size;
-
-        config = gst_buffer_pool_get_config (pool);
-        gst_buffer_pool_config_set_params (config, caps, size,
-            VSPM_BUFFERS, VSPM_BUFFERS);
-        gst_structure_set (config, "videosink_buffer_creation_request_supported",
-            G_TYPE_BOOLEAN, TRUE, NULL);
-
-        gst_buffer_pool_config_add_option (config, GST_BUFFER_POOL_OPTION_VIDEO_META);
-        if (!gst_buffer_pool_set_config (pool, config))
-          goto config_failed;
-    }
-
-    if (pool) {
-        gst_query_add_allocation_pool (query, pool, size,
-            VSPM_BUFFERS, VSPM_BUFFERS);
-        space->in_port_pool = pool;
-        gst_object_unref (pool);
-    }
-
-  } else {
-    ret = GST_BASE_TRANSFORM_CLASS(parent_class)->propose_allocation(trans, 
-                                                        decide_query,query);
-  }
-
-  return ret;
-
-  /* ERRORS */
-no_caps:
-  {
-    GST_ERROR_OBJECT (trans, "no caps specified");
-    return FALSE;
-  }
-invalid_caps:
-  {
-    GST_ERROR_OBJECT (trans, "invalid caps specified");
-    return FALSE;
-  }
-config_failed:
-  {
-    GST_ERROR_OBJECT (trans, "failed setting config");
-    gst_object_unref (pool);
-    return FALSE;
-  }
-}
-
-static gboolean
-gst_vspmfiler_query (GstBaseTransform *trans, GstPadDirection direction,
-                                   GstQuery *query)
-{
-  GstVspmFilter *space = GST_VIDEO_CONVERT_CAST (trans);
-  gboolean ret = FALSE;
-
-  if(space->use_dmabuf) {
-    switch (GST_QUERY_TYPE (query)) {
-        case GST_QUERY_CUSTOM:
-        {
-          const GstStructure *structure;
-          GstStructure *str_writable;
-          gint dmabuf[GST_VIDEO_MAX_PLANES] = { 0 };
-          GstAllocator *allocator;
-          gint width, height;
-          gint stride[GST_VIDEO_MAX_PLANES] = { 0 };
-          const gchar *str;
-          const GValue *p_val;
-          GValue val = { 0, };
-          GstVideoFormat format;
-          GstBuffer *buffer;
-          GArray *dmabuf_array;
-          GArray *stride_array;
-          gint n_planes;
-          gint i;
-
-          structure = gst_query_get_structure (query);
-          if (structure == NULL
-              || !gst_structure_has_name (structure,
-                  "videosink_buffer_creation_request")) {
-            GST_LOG_OBJECT (trans, "not a vsink_buffer_creation_request query");
-            break;
-          }
-
-          GST_DEBUG_OBJECT (trans,
-              "received a videosink_buffer_creation_request query");
-
-          gst_structure_get (structure, "width", G_TYPE_INT, &width,
-              "height", G_TYPE_INT, &height, "stride", G_TYPE_ARRAY, &stride_array,
-              "dmabuf", G_TYPE_ARRAY, &dmabuf_array,
-              "n_planes", G_TYPE_INT, &n_planes,
-              "allocator", G_TYPE_POINTER, &p_val,
-              "format", G_TYPE_STRING, &str, NULL);
-
-          allocator = (GstAllocator *) g_value_get_pointer (p_val);
-          if (allocator == NULL) {
-            GST_WARNING_OBJECT (trans,
-                "an invalid allocator in videosink_buffer_creation_request query");
-            break;
-          }
-
-          format = gst_video_format_from_string (str);
-          if (format == GST_VIDEO_FORMAT_UNKNOWN) {
-            GST_WARNING_OBJECT (trans,
-                "invalid color format in videosink_buffer_creation_request query");
-            break;
-          }
-
-          for (i = 0; i < n_planes; i++) {
-            dmabuf[i] = g_array_index (dmabuf_array, gint, i);
-            stride[i] = g_array_index (stride_array, gint, i);
-            GST_DEBUG_OBJECT (trans, "plane:%d dmabuf:%d stride:%d\n", i, dmabuf[i],
-                stride[i]);
-          }
-
-          GST_DEBUG_OBJECT (trans,
-              "videosink_buffer_creation_request query param: width:%d height:%d allocator:%p format:%s",
-              width, height, allocator, str);
-
-          buffer = gst_vspmfilter_buffer_pool_create_buffer_from_dmabuf (
-              space, dmabuf, allocator, width, height, stride, format, n_planes);
-          if (buffer == NULL) {
-            GST_WARNING_OBJECT (trans,
-                "failed to create a buffer from videosink_buffer_creation_request query");
-            break;
-          }
-
-          g_value_init (&val, GST_TYPE_BUFFER);
-          gst_value_set_buffer (&val, buffer);
-          gst_buffer_unref (buffer);
-          str_writable = gst_query_writable_structure (query);
-          gst_structure_set_value (str_writable, "buffer", &val);
-
-          ret = TRUE;
-          break;
-        }
-
-        default:
-          ret = GST_BASE_TRANSFORM_CLASS(parent_class)->query(trans,direction,query);
-          break;
-    }
-  } else {
-    ret = GST_BASE_TRANSFORM_CLASS(parent_class)->query(trans,direction,query);
-  }
-
-  return ret;
-}
-
-static GstBuffer *
-gst_vspm_filter_buffer_pool_request_videosink_buffer_creation (GstVspmFilter * space,
-    gint dmabuf_fd[GST_VIDEO_MAX_PLANES], gint stride[GST_VIDEO_MAX_PLANES], 
-    gint width, gint height)
-{
-  GstQuery *query;
-  GValue val = { 0, };
-  GstStructure *structure;
-  const GValue *value;
-  GstBuffer *buffer;
-  GArray *dmabuf_array;
-  GArray *stride_array;
-  gint n_planes;
-  gint i;
-
-  g_value_init (&val, G_TYPE_POINTER);
-  g_value_set_pointer (&val, (gpointer) space->allocator);
-
-  dmabuf_array = g_array_new (FALSE, FALSE, sizeof (gint));
-  stride_array = g_array_new (FALSE, FALSE, sizeof (gint));
-
-  n_planes = space->vsp_info->out_nplane;
-  for (i = 0; i < n_planes; i++) {
-    g_array_append_val (dmabuf_array, dmabuf_fd[i]);
-    g_array_append_val (stride_array, stride[i]);
-  }
-
-    structure = gst_structure_new ("videosink_buffer_creation_request",
-      "width", G_TYPE_INT, width,
-      "height", G_TYPE_INT, height,
-      "stride", G_TYPE_ARRAY, stride_array,
-      "dmabuf", G_TYPE_ARRAY, dmabuf_array,
-      "allocator", G_TYPE_POINTER, &val,
-      "format", G_TYPE_STRING,
-      gst_video_format_to_string (GST_VIDEO_FORMAT_NV12),
-      "n_planes", G_TYPE_INT, n_planes, NULL);
-
-  query = gst_query_new_custom (GST_QUERY_CUSTOM, structure);
-
-  GST_DEBUG_OBJECT (space, "send a videosink_buffer_creation_request query");
-
-  if (!gst_pad_peer_query (GST_BASE_TRANSFORM_SRC_PAD (GST_ELEMENT_CAST(space)), query)) {
-    GST_ERROR_OBJECT (space, "videosink_buffer_creation_request query failed");
-    return NULL;
-  }
-
-  value = gst_structure_get_value (structure, "buffer");
-  buffer = gst_value_get_buffer (value);
-  if (buffer == NULL) {
-    GST_ERROR_OBJECT (space,
-        "could not get a buffer from videosink_buffer_creation query");
-    return NULL;
-  }
-
-  gst_query_unref (query);
-
-  g_array_free (dmabuf_array, TRUE);
-  g_array_free (stride_array, TRUE);
-
-  return buffer;
-}
-
-static gint
-get_uv_offset_aligned_to_page (gint page_size, gint stride, gint height)
-{
-  gint a, b, r;
-  gint lcm;
-
-  /*
-   * The following implementation uses the Euclidean Algorithm to obtain
-   * the least common multiple of stride and page size.
-   */
-
-  /* nStride is set to width, to achieve 4K aligned by adjusting
-     the nSliceHeight. */
-  /* (1) Calculate the GCD of stride and alignment */
-  b = stride;
-  a = page_size;
-  while ((r = a % b) != 0) {
-    a = b;
-    b = r;
-  }
-
-  /* (2) Calculate the LCM of stride and alignment */
-  lcm = stride * page_size / b;
-
-  /* (3) Calculate the offset of UV plane */
-  return (((stride * height) / lcm) + 1) * lcm;
-}
-
 static GstFlowReturn gst_vspm_filter_prepare_output_buffer (GstBaseTransform * trans,
                                           GstBuffer *inbuf, GstBuffer **outbuf)
 {
@@ -1022,116 +671,7 @@ static GstFlowReturn gst_vspm_filter_prepare_output_buffer (GstBaseTransform * t
     vspm_out    = space->vspm_out;
     vspm_outbuf = space->vspm_outbuf;
 
-    if(space->use_dmabuf) {
-        while(TRUE) {
-            buf = g_ptr_array_index (vspm_outbuf->buf_array, vspm_outbuf->current_buffer_index);
-            n_mem = gst_buffer_n_memory (buf);
-            if (n_mem == 0) {
-              GstBuffer *new_buf;
-              GstVideoMeta *vmeta;
-              gint n_planes;
-              guint totalsize = 0;
-              gint vspm_used = vspm_out->used;
-              gint dmabuf_fd[GST_VIDEO_MAX_PLANES];
-              guint plane_size[GST_VIDEO_MAX_PLANES];
-              guint stride[GST_VIDEO_MAX_PLANES];
-              guint offset[GST_VIDEO_MAX_PLANES];
-              GstVideoFormatInfo *out_finfo;
-
-              vmeta = gst_buffer_get_video_meta (buf);
-              n_planes = vmeta->n_planes;
-              space->vsp_info->out_nplane = n_planes;
-              out_finfo = gst_video_format_get_info (vmeta->format);
-
-              /* Calculate stride and size */
-              for (i = 0; i < n_planes; i++) {
-                guint slideheight;
-                offset[i] = totalsize;
-                stride[i] = GST_VIDEO_FORMAT_INFO_PSTRIDE(out_finfo, i) *
-                  GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (out_finfo, i, vmeta->width);
-
-                slideheight = GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT (
-                    out_finfo, i, vmeta->height);
-                plane_size[i] = stride[i] * slideheight;
-
-                /* Waylandsink requires alignment 4096 to ensure data correctness */
-                if (plane_size[i] % 4096)
-                  plane_size[i] = get_uv_offset_aligned_to_page (4096,
-                      stride[i], slideheight);
-
-                totalsize += plane_size[i];
-              }
-
-              switch(vmeta->format) {
-                case GST_VIDEO_FORMAT_NV12:
-
-                    if (R_MM_OK == mmngr_alloc_in_user(&vspm_out->vspm[vspm_used].mmng_pid,
-                                        totalsize,
-                                        &vspm_out->vspm[vspm_used].pphy_addr,
-                                        &vspm_out->vspm[vspm_used].phard_addr,
-                                        &vspm_out->vspm[vspm_used].puser_virt_addr,
-                                        MMNGR_VA_SUPPORT)) {
-                        vspm_out->used++;
-                      } else {
-                        printf("MMNGR: allocation error\n");
-                      }
-                    break;
-                default : 
-                    printf("ERROR: Format not supported\n");
-                    break;
-              }
-
-
-              for (i = 0; i < n_planes; i++) {
-                gint res;
-                guint phys_addr;
-
-                phys_addr = (guint) vspm_out->vspm[vspm_used].phard_addr + offset[i];
-
-                res =
-                    mmngr_export_start_in_user (&vspm_out->vspm[vspm_used].dmabuf_pid[i],
-                    plane_size[i], (unsigned long) phys_addr, &dmabuf_fd[i]);
-                if (res != R_MM_OK) {
-                  GST_ERROR_OBJECT (trans,
-                      "mmngr_export_start_in_user failed (phys_addr:0x%08x)",
-                      phys_addr);
-                  return GST_FLOW_ERROR;
-                }
-              }
-              new_buf = gst_vspm_filter_buffer_pool_request_videosink_buffer_creation (space,
-                    dmabuf_fd, vmeta->stride, vmeta->width, vmeta->height);
-              if(!new_buf)
-                new_buf = gst_buffer_new();
-
-              vspm_out->vspm[vspm_used].buf = new_buf;
-
-              if (!space->first_buff) {
-                gst_buffer_unref (buf);
-                g_ptr_array_remove_index (vspm_outbuf->buf_array, 
-                                            vspm_outbuf->current_buffer_index);
-                g_ptr_array_add (vspm_outbuf->buf_array, new_buf);
-              }
-
-              space->first_buff = 0;
-              *outbuf = new_buf;
-            } else {
-              *outbuf = buf;
-              vspm_outbuf->current_buffer_index ++;
-              if(vspm_outbuf->current_buffer_index >= vspm_outbuf->buf_array->len)
-                    vspm_outbuf->current_buffer_index = 0;
-            }
-
-            if(gst_buffer_is_writable(*outbuf)) {
-                if (!GST_BASE_TRANSFORM_CLASS(parent_class)->copy_metadata (trans,
-                                                            inbuf, *outbuf)) {
-                    /* something failed, post a warning */
-                    GST_ELEMENT_WARNING (trans, STREAM, NOT_IMPLEMENTED,
-                    ("could not copy metadata"), (NULL));
-                }
-                break;
-            }
-        }
-    } else if(space->outbuf_allocate) {
+    if(space->outbuf_allocate) {
       trans->priv->passthrough = 0; //disable pass-through mode
 
       ret = gst_buffer_pool_acquire_buffer(space->out_port_pool, outbuf, NULL);
@@ -1238,10 +778,6 @@ gst_vspm_filter_class_init (GstVspmFilterClass * klass)
       "Filter/Converter/Video",
       "Converts colorspace and video size from one to another",
       "Renesas Corporation");
-  g_object_class_install_property (gobject_class, PROP_VSPM_DMABUF,
-      g_param_spec_boolean ("dmabuf-use", "Use DMABUF mode",
-        "Whether or not to use dmabuf",
-        FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
   g_object_class_install_property (gobject_class, PROP_VSPM_OUTBUF,
       g_param_spec_boolean ("outbuf-alloc", "Use outbuf-alloc mode",
         "Whether or not to self-allocate output buffer",
@@ -1256,16 +792,8 @@ gst_vspm_filter_class_init (GstVspmFilterClass * klass)
   gstbasetransform_class->transform_meta =
       GST_DEBUG_FUNCPTR (gst_vspm_filter_transform_meta);
 
-  gstbasetransform_class->propose_allocation =
-      GST_DEBUG_FUNCPTR (gst_vspm_filter_propose_allocation);
   gstbasetransform_class->prepare_output_buffer = 
       GST_DEBUG_FUNCPTR (gst_vspm_filter_prepare_output_buffer);
-  gstbasetransform_class->transform =
-      GST_DEBUG_FUNCPTR (gst_vspm_filter_transform);
-    gstbasetransform_class->query = 
-        GST_DEBUG_FUNCPTR (gst_vspmfiler_query);
-  gstbasetransform_class->passthrough_on_same_caps = TRUE;
-
   gstvideofilter_class->set_info =
       GST_DEBUG_FUNCPTR (gst_vspm_filter_set_info);
   gstvideofilter_class->transform_frame =
@@ -1387,7 +915,6 @@ gst_vspm_filter_init (GstVspmFilter * space)
   vspm_outbuf->buf_array = g_ptr_array_new ();  
   vspm_outbuf->current_buffer_index = 0;
   space->allocator = gst_dmabuf_allocator_new ();
-  space->use_dmabuf = FALSE;
   space->outbuf_allocate = TRUE;
   space->first_buff = 1;
 
@@ -1410,18 +937,8 @@ gst_vspm_filter_set_property (GObject * object, guint property_id,
 
   trans = GST_BASE_TRANSFORM (object);
   switch (property_id) {
-    case PROP_VSPM_DMABUF:
-      space->use_dmabuf = g_value_get_boolean (value);
-      if(space->use_dmabuf) {
-        gst_base_transform_set_qos_enabled (trans, FALSE);
-        space->outbuf_allocate = FALSE;
-      }
-      break;
     case PROP_VSPM_OUTBUF:
       space->outbuf_allocate = g_value_get_boolean (value);
-      if(space->use_dmabuf) {
-        space->use_dmabuf = FALSE;
-      }
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
@@ -1435,9 +952,6 @@ gst_vspm_filter_get_property (GObject * object, guint property_id,
 {
   GstVspmFilter *space = GST_VIDEO_CONVERT_CAST (object);
   switch (property_id) {
-    case PROP_VSPM_DMABUF:
-      g_value_set_boolean (value, space->use_dmabuf);
-      break;
     case PROP_VSPM_OUTBUF:
       g_value_set_boolean (value, space->outbuf_allocate);
       break;
@@ -1708,266 +1222,6 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
   return GST_FLOW_OK;
 }
 
-
-static GstFlowReturn
-gst_vspm_filter_transform_buffer (GstVideoFilter * filter,
-                                    GstBuffer * inbuf,
-                                    GstBuffer * outbuf)
-{
-  GstVspmFilter *space;
-  GstVspmFilterVspInfo *vsp_info;
-  GstVideoMeta *in_vmeta;
-  GstVideoMeta *out_vmeta;
-  VSPM_IP_PAR vspm_ip;
-  VSPM_VSP_PAR vsp_par;
-  Vspm_mmng_ar *vspm_in;
-  Vspm_mmng_ar *vspm_out;
-
-  T_VSP_IN src_par;
-  T_VSP_ALPHA src_alpha_par;
-  T_VSP_OUT dst_par;
-  T_VSP_CTRL ctrl_par;
-
-  T_VSP_UDS uds_par;
-  gint in_width, in_height;
-  gint out_width, out_height;
-  long ercd;
-  gint irc;
-  unsigned long use_module;
-
-  int i;
-  struct MM_PARAM	p_adr[2];
-  gint stride[GST_VIDEO_MAX_PLANES];
-  gsize offset[GST_VIDEO_MAX_PLANES];
-  gint offs, plane_size;
-  const GstVideoFormatInfo * vspm_in_vinfo;
-  const GstVideoFormatInfo * vspm_out_vinfo;
-
-  space = GST_VIDEO_CONVERT_CAST (filter);
-  vsp_info = space->vsp_info;
-  vspm_in = space->vspm_in;
-  vspm_out = space->vspm_out;
-
-  in_vmeta = gst_buffer_get_video_meta (inbuf); 
-  if(in_vmeta) {
-    vsp_info->gst_format_in = in_vmeta->format;
-    vsp_info->in_width = in_vmeta->width;
-    vsp_info->in_height = in_vmeta->height;
-  }
-
-  out_vmeta = gst_buffer_get_video_meta (outbuf);
-  if(out_vmeta) {
-    vsp_info->gst_format_out = out_vmeta->format;
-    vsp_info->out_width = out_vmeta->width;
-    vsp_info->out_height = out_vmeta->height;
-  }
-
-  GST_CAT_DEBUG_OBJECT (GST_CAT_PERFORMANCE, filter,
-      "doing colorspace conversion from %s -> to %s",
-      GST_VIDEO_INFO_NAME (&filter->in_info),
-      GST_VIDEO_INFO_NAME (&filter->out_info));
-
-  memset(&ctrl_par, 0, sizeof(T_VSP_CTRL));
-
-  if (vsp_info->format_flag == 0) {
-    irc = set_colorspace (vsp_info->gst_format_in, &vsp_info->in_format, &vsp_info->in_swapbit);
-    if (irc != 0) {
-      printf("input format is non-support.\n");
-      return GST_FLOW_ERROR;
-    }
-    irc = set_colorspace_output (vsp_info->gst_format_out, &vsp_info->out_format, &vsp_info->out_swapbit);
-    if (irc != 0) {
-      printf("output format is non-support.\n");
-      return GST_FLOW_ERROR;
-    }
-    vsp_info->format_flag = 1;
-  }
-
-  in_width = vsp_info->in_width;
-  in_height = vsp_info->in_height;
-  vspm_in_vinfo = gst_video_format_get_info (vsp_info->gst_format_in);
-
-  out_width = vsp_info->out_width;
-  out_height = vsp_info->out_height;
-  vspm_out_vinfo = gst_video_format_get_info (vsp_info->gst_format_out);
-
-  if ((in_width == out_width) && (in_height == out_height)) {
-    use_module = 0;
-  } else {
-    /* UDS scaling */
-    use_module = VSP_UDS_USE;
-  }
-
-  memset(&p_adr, 0, sizeof(p_adr));
-
-  if(buffer_get_dmabuf_hard_addr(vspm_in,inbuf))  
-    p_adr[0].hard_addr = buffer_get_dmabuf_hard_addr(vspm_in,inbuf);
-
-  if(buffer_get_dmabuf_hard_addr(vspm_out,outbuf))  
-    p_adr[1].hard_addr = buffer_get_dmabuf_hard_addr(vspm_out,outbuf);
-
-  {
-    /* Calculate stride and offset of each planes */
-    offs = 0;
-    for (i=0; i < GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_in_vinfo); i++) {
-      offset[i] = offs;
-      stride[i] = GST_VIDEO_FORMAT_INFO_PSTRIDE(vspm_in_vinfo, i) *
-          GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (vspm_in_vinfo, i,
-              in_width);
-
-      plane_size = stride[i] * 
-        GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT (vspm_in_vinfo, i, in_height);
-
-      offs += plane_size;
-    }
-
-    src_alpha_par.addr_a    = NULL;
-    src_alpha_par.alphan    = VSP_ALPHA_NO;
-    src_alpha_par.alpha1    = 0;
-    src_alpha_par.alpha2    = 0;
-    src_alpha_par.astride   = 0;
-    src_alpha_par.aswap     = VSP_SWAP_NO;
-    src_alpha_par.asel      = VSP_ALPHA_NUM5;
-    src_alpha_par.aext      = VSP_AEXT_EXPAN;
-    src_alpha_par.anum0     = 0;
-    src_alpha_par.anum1     = 0;
-    src_alpha_par.afix      = 0xff;
-    src_alpha_par.irop      = VSP_IROP_NOP;
-    src_alpha_par.msken     = VSP_MSKEN_ALPHA;
-    src_alpha_par.bsel      = 0;
-    src_alpha_par.mgcolor   = 0;
-    src_alpha_par.mscolor0  = 0;
-    src_alpha_par.mscolor1  = 0;
-
-    src_par.addr        = (void *) p_adr[0].hard_addr;
-    src_par.stride      = stride[0];
-    if (GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_in_vinfo) > 1) src_par.stride_c = stride[1];
-    if (GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_in_vinfo) > 1) src_par.addr_c0  = (void*) ((guint)src_par.addr + offset[1]);
-    if (GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_in_vinfo) > 2) src_par.addr_c1  = (void*) ((guint)src_par.addr + offset[2]);
-
-    /* not convert colorspace */
-    src_par.csc         = VSP_CSC_OFF;
-
-    src_par.width       = in_width;
-    src_par.height      = in_height;
-    src_par.width_ex    = 0;
-    src_par.height_ex   = 0;
-    src_par.x_offset    = 0;
-    src_par.y_offset    = 0;
-    src_par.format      = vsp_info->in_format;
-    src_par.swap        = vsp_info->in_swapbit;
-    src_par.x_position  = 0;
-    src_par.y_position  = 0;
-    src_par.pwd         = VSP_LAYER_PARENT;
-    src_par.cipm        = VSP_CIPM_0_HOLD;
-    src_par.cext        = VSP_CEXT_EXPAN;
-    src_par.iturbt      = VSP_ITURBT_709;
-    src_par.clrcng      = VSP_ITU_COLOR;
-    src_par.vir         = VSP_NO_VIR;
-    src_par.vircolor    = 0x00000000;
-    src_par.osd_lut     = NULL;
-    src_par.alpha_blend = &src_alpha_par;
-    src_par.clrcnv      = NULL;
-    src_par.connect     = use_module;
-  }
-
-  {
-    /* Calculate stride and offset of each planes */
-    offs = 0;
-    for (i=0; i < GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_out_vinfo); i++) {
-      offset[i] = offs;
-      stride[i] = GST_VIDEO_FORMAT_INFO_PSTRIDE(vspm_out_vinfo, i) *
-          GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (vspm_out_vinfo, i,
-              out_width);
-
-      plane_size = stride[i] * 
-        GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT (vspm_out_vinfo, i, out_height);
-
-      offs += plane_size;
-    }
-
-    dst_par.addr        = (void *)p_adr[1].hard_addr;
-    dst_par.stride      = stride[0];
-    if (GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_out_vinfo) > 1) dst_par.stride_c = stride[1];
-    if (GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_out_vinfo) > 1) {
-        gint uv_offset = 0;
-        if (((out_width * out_height) & (4096 - 1))
-                && (GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_out_vinfo) == 2))
-            uv_offset = get_uv_offset_aligned_to_page (4096, out_width, out_height);
-        else
-            uv_offset = offset[1];
-        dst_par.addr_c0  = (void*) ((guint)dst_par.addr + uv_offset);
-    }
-    if (GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_out_vinfo) > 2) dst_par.addr_c1  = (void*) ((guint)dst_par.addr + offset[2]);
-
-    /* convert if format in and out different in color space */
-    if (!GST_VIDEO_FORMAT_INFO_IS_YUV(vspm_in_vinfo) != !GST_VIDEO_FORMAT_INFO_IS_YUV(vspm_out_vinfo))
-      dst_par.csc     = VSP_CSC_ON;
-    else dst_par.csc  = VSP_CSC_OFF;
-
-    dst_par.width     = out_width;
-    dst_par.height    = out_height;
-    dst_par.x_offset  = 0;
-    dst_par.y_offset  = 0;
-    dst_par.format    = vsp_info->out_format;
-    dst_par.swap      = vsp_info->out_swapbit;
-    dst_par.pxa       = VSP_PAD_P;
-    dst_par.pad       = 0xff;
-    dst_par.x_coffset = 0;
-    dst_par.y_coffset = 0;
-    dst_par.iturbt    = VSP_ITURBT_709;
-    dst_par.clrcng    = VSP_ITU_COLOR;
-    dst_par.cbrm      = VSP_CSC_ROUND_DOWN;
-    dst_par.abrm      = VSP_CONVERSION_ROUNDDOWN;
-    dst_par.athres    = 0;
-    dst_par.clmd      = VSP_CLMD_NO;
-    dst_par.dith      = VSP_NO_DITHER;
-  }
-
-  if (use_module == VSP_UDS_USE) {
-    /* Set T_VSP_UDS. */
-    ctrl_par.uds     = &uds_par;
-    memset(&uds_par, 0, sizeof(T_VSP_UDS));
-    uds_par.fmd      = VSP_FMD;
-    uds_par.filcolor = 0x0000FF00; /* green */
-
-    uds_par.x_ratio     = (unsigned short)( (in_width << 12) / out_width );
-    uds_par.y_ratio     = (unsigned short)( (in_height << 12) / out_height );
-    uds_par.out_cwidth  = (unsigned short)out_width;
-    uds_par.out_cheight = (unsigned short)out_height;
-    uds_par.connect     = 0;
-  }
-
-  vsp_par.rpf_num    = 1;
-  vsp_par.use_module = use_module;
-  vsp_par.src1_par   = &src_par;
-  vsp_par.src2_par   = NULL;
-  vsp_par.src3_par   = NULL;
-  vsp_par.src4_par   = NULL;
-  vsp_par.dst_par    = &dst_par;
-  vsp_par.ctrl_par   = &ctrl_par;
-
-  memset(&vspm_ip, 0, sizeof(VSPM_IP_PAR));
-  vspm_ip.uhType    = VSPM_TYPE_VSP_AUTO;
-  vspm_ip.unionIpParam.ptVsp = &vsp_par;
-
-  end_flag = 0;
-  ercd = VSPM_lib_Entry(vsp_info->vspm_handle, &vsp_info->jobid, 126, &vspm_ip, 0, cb_func); 
-  if (ercd) {
-    printf("VSPM_lib_Entry() Failed!! ercd=%ld\n", ercd);
-    return GST_FLOW_ERROR;
-  }
-
-  while(1) {
-    if (end_flag) break;
-  }
-
-  gst_buffer_ref(outbuf);
-  gst_buffer_unref(inbuf);
-
-  return GST_FLOW_OK;
-}
-
 static gboolean
 plugin_init (GstPlugin * plugin)
 {
-- 
2.7.4

