From 42c21860e97758ecfc09f7a01d3df60abc1a7b9b Mon Sep 17 00:00:00 2001
From: HungTran <hung.tran.jy@rvc.renesas.com>
Date: Mon, 30 Mar 2015 17:10:12 +0700
Subject: [PATCH 2/2] gst-launch: fix padprobe duration error

This error happens randomly when playing video with padprobe, especially
in duration test).

The rootcause is using g_print inside a SIGALRM handler.
Every kind of "print" is non-reentrant so put it inside a signal
handler is not safe.

This patch fixes this issue by replacing g_print with write

Signed-off-by: HungTran <hung.tran.jy@rvc.renesas.com>
refs #64820
---
 tools/gst-launch.c | 21 +++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff --git a/tools/gst-launch.c b/tools/gst-launch.c
index 2e04c44..0e47398 100644
--- a/tools/gst-launch.c
+++ b/tools/gst-launch.c
@@ -1011,8 +1011,25 @@ void alarm_awake()
   framesinsec = count-past_count;
 
   if (count > 0 && timer == TRUE) {
-           tptr = localtime(&t);
-           g_print ("FPS: %3d  TIME %02d:%02d:%02d\n",(int)framesinsec,tptr->tm_hour, tptr->tm_min, tptr->tm_sec);
+    tptr = localtime(&t);
+
+    /* Write the output fps info to STDOUT
+     * Note that below operation can be replaced
+     * by a simple printf, but every kind of
+     * print is non-reentrant so it is not safe
+     * to use inside a signal handler */
+    gchar str[]="FPS: 000  TIME 00:00:00 ";
+    str[5] = framesinsec / 100 + '0';
+    str[6] = (framesinsec % 100) / 10 + '0';
+    str[7] = framesinsec % 10 + '0';
+    str[15] = tptr->tm_hour / 10 + '0';
+    str[16] = tptr->tm_hour % 10 + '0';
+    str[18] = tptr->tm_min / 10 + '0';
+    str[19] = tptr->tm_min % 10 + '0';
+    str[21] = tptr->tm_sec / 10 + '0';
+    str[22] = tptr->tm_sec % 10 + '0';
+    str[23] = '\n';
+    write (STDOUT_FILENO, str, sizeof(str));
   }
 
   past_count=count;
-- 
1.9.1

