From a227acd19cd8550ee1f6f67558d96a4c3f52507d Mon Sep 17 00:00:00 2001
From: Hung Tran <hung.tran.jy@renesas.com>
Date: Fri, 13 Jul 2018 11:48:58 +0700
Subject: [PATCH 2/4] waylandsink: Add set window scale feature

Signed-off-by: AnNDP <anndp@fsoft.com.vn>
Signed-off-by: Hung Tran <hung.tran.jy@renesas.com>
---
 ext/wayland/gstwaylandsink.c | 21 ++++++++++++++++++---
 ext/wayland/gstwaylandsink.h |  1 +
 ext/wayland/wlwindow.c       |  8 +++++---
 ext/wayland/wlwindow.h       |  2 +-
 4 files changed, 25 insertions(+), 7 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index fb288a9..48a9ded 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -67,6 +67,7 @@ enum
   PROP_SUPPRESS_INTERLACE,
   PROP_WAYLAND_POSITION_X,    /* add property (position_x) */
   PROP_WAYLAND_POSITION_Y,    /* add property (position_y) */
+  PROP_WAYLAND_SCALE,         /* add property (scale)  */
 };
 
 #define DEFAULT_USE_SUBSURFACE          TRUE
@@ -188,12 +189,17 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
       g_param_spec_int ("position_x", "Position_X",
                         "Wayland  Position X value from the application ",
                         0, G_MAXINT, 0, G_PARAM_READWRITE));
-
   /* install property (position_y) */
   g_object_class_install_property (G_OBJECT_CLASS(klass), PROP_WAYLAND_POSITION_Y,
       g_param_spec_int ("position_y", "Position_Y",
                         "Wayland  Position Y value from the application ",
                         0, G_MAXINT, 0, G_PARAM_READWRITE));
+
+  /* install property (scale) */
+  g_object_class_install_property (G_OBJECT_CLASS(klass), PROP_WAYLAND_SCALE,
+      g_param_spec_float ("scale", "Scale factor",
+                        "Scale factor for display size",
+                        0, G_MAXFLOAT, 0, G_PARAM_READWRITE));
 }
 
 static void
@@ -206,6 +212,7 @@ gst_wayland_sink_init (GstWaylandSink * sink)
   sink->enable_interlace = !DEFAULT_SUPPRESS_INTERLACE;
   sink->position_x = -1;
   sink->position_y = -1;
+  sink->scale = 0;
 }
 
 
@@ -235,6 +242,10 @@ gst_wayland_sink_get_property (GObject * object,
       /* set position_y property */
       g_value_set_int (value, sink->position_y);
       break;
+    case PROP_WAYLAND_SCALE:
+      /* set scale property */
+      g_value_set_float (value, sink->scale);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -267,6 +278,10 @@ gst_wayland_sink_set_property (GObject * object,
       /* get position_y property */
       sink->position_y = g_value_get_int (value);
       break;
+    case PROP_WAYLAND_SCALE:
+      /* get scale property */
+      sink->scale = g_value_get_float (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -707,10 +722,10 @@ gst_wayland_sink_show_frame (GstVideoSink * vsink, GstBuffer * buffer)
 
     if (!sink->window) {
       /* if we were not provided a window, create one ourselves */
-      /* also set window position here */
+      /* also set window position and scale here */
       sink->window = gst_wl_window_new_toplevel (sink->display,
           &sink->video_info, &sink->render_lock, sink->use_subsurface,
-          sink->position_x, sink->position_y);
+          sink->position_x, sink->position_y, sink->scale);
     }
   }
 
diff --git a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
index 7324d25..ff5c1ae 100644
--- a/ext/wayland/gstwaylandsink.h
+++ b/ext/wayland/gstwaylandsink.h
@@ -74,6 +74,7 @@ struct _GstWaylandSink
   gboolean enable_interlace;
   gint position_x;
   gint position_y;
+  gfloat scale;
 };
 
 struct _GstWaylandSinkClass
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index 7de29c9..011ecc7 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -166,10 +166,10 @@ gst_wl_window_new_internal (GstWlDisplay * display, GMutex * render_lock,
 
 GstWlWindow *
 gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
-    GMutex * render_lock, gboolean use_subsurface, gint posx, gint posy)
+    GMutex * render_lock, gboolean use_subsurface, gint posx, gint posy, gfloat scale)
 {
   GstWlWindow *window;
-  gint width;
+  gint width, height;
 
   window =
       gst_wl_window_new_internal (display, render_lock, NULL, use_subsurface);
@@ -196,7 +196,11 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
   /* set the initial size to be the same as the reported video size */
   width =
       gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
-  gst_wl_window_set_render_rectangle (window, 0, 0, width, info->height);
+  if (scale == 0) scale = 1;    /* don't scale if scale=0 */
+  width = width * scale;
+  height = info->height * scale;
+
+  gst_wl_window_set_render_rectangle (window, 0, 0, width, height);
 
   return window;
 }
diff --git a/ext/wayland/wlwindow.h b/ext/wayland/wlwindow.h
index 933a800..62bc0f0 100644
--- a/ext/wayland/wlwindow.h
+++ b/ext/wayland/wlwindow.h
@@ -80,7 +80,7 @@ GType gst_wl_window_get_type (void);
 
 GstWlWindow *gst_wl_window_new_toplevel (GstWlDisplay * display,
         const GstVideoInfo * info, GMutex * render_lock, gboolean use_subsurface,
-        gint posx, gint posy);
+        gint posx, gint posy, gfloat scale);
 GstWlWindow *gst_wl_window_new_in_surface (GstWlDisplay * display,
         struct wl_surface * parent, GMutex * render_lock, gboolean use_subsurface);
 
-- 
1.9.1

