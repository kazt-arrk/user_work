From d8c68b5d76481bc1ac4e64c840d5d67c370cff83 Mon Sep 17 00:00:00 2001
From: Quoc Ngo <quoc.ngo.wz@rvc.renesas.com>
Date: Tue, 2 Oct 2018 19:06:57 +0700
Subject: [PATCH] camerarecordermode: fit screen display camera with Qt app

- correct variable type for x_position, y_position, out_width and
  out_height
- fit screen camera display with Qt app layer
- change format for capsfilter and properties for vspmfilter

Signed-off-by: Quoc Ngo <quoc.ngo.wz@rvc.renesas.com>
---
 .../multimedia/qdeclarativecamerarecordermode.cpp  | 24 ++++++------
 .../multimedia/qdeclarativecamerarecordermode_p.h  | 32 +++++++--------
 .../controls/qcamerarecordermodecontrol.h          |  8 ++--
 src/multimedia/recording/qcamerarecordermode.cpp   |  8 ++--
 src/multimedia/recording/qcamerarecordermode.h     |  8 ++--
 .../qgstreamercamerarecordermodecontrol.cpp        |  8 ++--
 .../qgstreamercamerarecordermodecontrol.h          |  8 ++--
 .../qgstreamercamerarecordermodesession.cpp        | 45 +++++++++++++---------
 .../qgstreamercamerarecordermodesession.h          | 17 ++++----
 9 files changed, 84 insertions(+), 74 deletions(-)

diff --git a/src/imports/multimedia/qdeclarativecamerarecordermode.cpp b/src/imports/multimedia/qdeclarativecamerarecordermode.cpp
index f89916b..d8c5120 100644
--- a/src/imports/multimedia/qdeclarativecamerarecordermode.cpp
+++ b/src/imports/multimedia/qdeclarativecamerarecordermode.cpp
@@ -48,10 +48,10 @@ QT_BEGIN_NAMESPACE
 QDeclarativeCameraRecorderMode::QDeclarativeCameraRecorderMode(QObject *parent)
     : QObject(parent)
     , m_fsinklocation("\0")
-    , m_x_position("\0")
-    , m_y_position("\0")
-    , m_out_width("\0")
-    , m_out_height("\0")
+    , m_x_position(0)
+    , m_y_position(0)
+    , m_out_width(0)
+    , m_out_height(0)
 
 
 {
@@ -109,25 +109,25 @@ void QDeclarativeCameraRecorderMode::setFSinkLocation(QString fsinkloc)
     m_recorder->setFSinkLocation(m_fsinklocation);
 }
 
-void QDeclarativeCameraRecorderMode::setX_position(QString xposloc)
+void QDeclarativeCameraRecorderMode::setX_position(qint32 xposloc)
 {
     m_x_position = xposloc;
     m_recorder->setX_position(m_x_position);
 }
 
-void QDeclarativeCameraRecorderMode::setY_position(QString yposloc)
+void QDeclarativeCameraRecorderMode::setY_position(qint32 yposloc)
 {
     m_y_position = yposloc;
     m_recorder->setY_position(m_y_position);
 }
 
-void QDeclarativeCameraRecorderMode::setOut_width(QString owitdhloc)
+void QDeclarativeCameraRecorderMode::setOut_width(qint32 owitdhloc)
 {
     m_out_width = owitdhloc;
     m_recorder->setOut_width(m_out_width);
 }
 
-void QDeclarativeCameraRecorderMode::setOut_height(QString oheightloc)
+void QDeclarativeCameraRecorderMode::setOut_height(qint32 oheightloc)
 {
     m_out_height = oheightloc;
     m_recorder->setOut_height(m_out_height);
@@ -138,22 +138,22 @@ QString QDeclarativeCameraRecorderMode::fSinkLocation() const
     return m_fsinklocation;
 }
 
-QString QDeclarativeCameraRecorderMode::x_position() const
+qint32 QDeclarativeCameraRecorderMode::x_position() const
 {
     return m_x_position;
 }
 
-QString QDeclarativeCameraRecorderMode::y_position() const
+qint32 QDeclarativeCameraRecorderMode::y_position() const
 {
     return m_y_position;
 }
 
-QString QDeclarativeCameraRecorderMode::out_width() const
+qint32 QDeclarativeCameraRecorderMode::out_width() const
 {
     return m_out_width;
 }
 
-QString QDeclarativeCameraRecorderMode::out_height() const
+qint32 QDeclarativeCameraRecorderMode::out_height() const
 {
     return m_out_height;
 }
diff --git a/src/imports/multimedia/qdeclarativecamerarecordermode_p.h b/src/imports/multimedia/qdeclarativecamerarecordermode_p.h
index 73f29a3..4e48142 100644
--- a/src/imports/multimedia/qdeclarativecamerarecordermode_p.h
+++ b/src/imports/multimedia/qdeclarativecamerarecordermode_p.h
@@ -73,10 +73,10 @@ class QDeclarativeCameraRecorderMode : public QObject, public QQmlParserStatus
 {
     Q_OBJECT
     Q_PROPERTY(QString fSinkLocation READ fSinkLocation WRITE setFSinkLocation)
-	Q_PROPERTY(QString x_position READ x_position WRITE setX_position)
-	Q_PROPERTY(QString y_position READ y_position WRITE setY_position)
-	Q_PROPERTY(QString out_width READ out_width WRITE setOut_width)
-	Q_PROPERTY(QString out_height READ out_height WRITE setOut_height)
+	Q_PROPERTY(qint32 x_position READ x_position WRITE setX_position)
+	Q_PROPERTY(qint32 y_position READ y_position WRITE setY_position)
+	Q_PROPERTY(qint32 out_width READ out_width WRITE setOut_width)
+	Q_PROPERTY(qint32 out_height READ out_height WRITE setOut_height)
     Q_PROPERTY(Status status READ status NOTIFY statusChanged)
     Q_PROPERTY(State state READ state NOTIFY stateChanged)
     Q_PROPERTY(Error error READ error NOTIFY errorChanged)
@@ -126,16 +126,16 @@ public:
     QString errorString() const;
 
     void setFSinkLocation(QString fsinkloc);
-    void setX_position(QString xposloc);
-    void setY_position(QString yposloc);
-    void setOut_width(QString owitdhloc);
-    void setOut_height(QString oheightloc);
+    void setX_position(qint32 xposloc);
+    void setY_position(qint32 yposloc);
+    void setOut_width(qint32 owitdhloc);
+    void setOut_height(qint32 oheightloc);
 
     QString fSinkLocation() const;
-    QString x_position() const;
-    QString y_position() const;
-    QString out_width() const;
-    QString out_height() const;
+    qint32 x_position() const;
+    qint32 y_position() const;
+    qint32 out_width() const;
+    qint32 out_height() const;
 
 public Q_SLOTS:
     void pause();
@@ -168,10 +168,10 @@ private:
 
     QCameraRecorderMode *m_recorder;
     QString m_fsinklocation;
-    QString m_x_position;
-    QString m_y_position;
-    QString m_out_width;
-    QString m_out_height;
+    qint32 m_x_position;
+    qint32 m_y_position;
+    qint32 m_out_width;
+    qint32 m_out_height;
 
 
 };
diff --git a/src/multimedia/controls/qcamerarecordermodecontrol.h b/src/multimedia/controls/qcamerarecordermodecontrol.h
index e6a506a..6914fa9 100644
--- a/src/multimedia/controls/qcamerarecordermodecontrol.h
+++ b/src/multimedia/controls/qcamerarecordermodecontrol.h
@@ -57,10 +57,10 @@ public:
     virtual QCameraRecorderMode::MediaStatus mediaStatus() const = 0;
 
     virtual void setFSinkLocation(QString) = 0;
-    virtual void setX_position(QString) = 0;
-    virtual void setY_position(QString) = 0;
-    virtual void setOut_width(QString) = 0;
-    virtual void setOut_height(QString) = 0;
+    virtual void setX_position(qint32) = 0;
+    virtual void setY_position(qint32) = 0;
+    virtual void setOut_width(qint32) = 0;
+    virtual void setOut_height(qint32) = 0;
     virtual void componentComplete() = 0;
     virtual void start() = 0;
     virtual void stop() = 0;
diff --git a/src/multimedia/recording/qcamerarecordermode.cpp b/src/multimedia/recording/qcamerarecordermode.cpp
index c010a35..9f70234 100644
--- a/src/multimedia/recording/qcamerarecordermode.cpp
+++ b/src/multimedia/recording/qcamerarecordermode.cpp
@@ -238,7 +238,7 @@ void QCameraRecorderMode::setFSinkLocation(QString fsinklocation)
     d->control->setFSinkLocation(fsinklocation);
 }
 
-void QCameraRecorderMode::setX_position(QString xposition)
+void QCameraRecorderMode::setX_position(qint32 xposition)
 {
 #ifdef DEBUG_ENCODER
     qDebug() << Q_FUNC_INFO;
@@ -247,7 +247,7 @@ void QCameraRecorderMode::setX_position(QString xposition)
     d->control->setX_position(xposition);
 }
 
-void QCameraRecorderMode::setY_position(QString yposition)
+void QCameraRecorderMode::setY_position(qint32 yposition)
 {
 #ifdef DEBUG_ENCODER
     qDebug() << Q_FUNC_INFO;
@@ -256,7 +256,7 @@ void QCameraRecorderMode::setY_position(QString yposition)
     d->control->setY_position(yposition);
 }
 
-void QCameraRecorderMode::setOut_width(QString outwidth)
+void QCameraRecorderMode::setOut_width(qint32 outwidth)
 {
 #ifdef DEBUG_ENCODER
     qDebug() << Q_FUNC_INFO;
@@ -265,7 +265,7 @@ void QCameraRecorderMode::setOut_width(QString outwidth)
     d->control->setOut_width(outwidth);
 }
 
-void QCameraRecorderMode::setOut_height(QString outheight)
+void QCameraRecorderMode::setOut_height(qint32 outheight)
 {
 #ifdef DEBUG_ENCODER
     qDebug() << Q_FUNC_INFO;
diff --git a/src/multimedia/recording/qcamerarecordermode.h b/src/multimedia/recording/qcamerarecordermode.h
index b804658..774bcbe 100644
--- a/src/multimedia/recording/qcamerarecordermode.h
+++ b/src/multimedia/recording/qcamerarecordermode.h
@@ -106,10 +106,10 @@ public Q_SLOTS:
     void stop();
     void pause();
     void setFSinkLocation(QString);
-    void setX_position(QString);
-    void setY_position(QString);
-    void setOut_width(QString);
-    void setOut_height(QString);
+    void setX_position(qint32);
+    void setY_position(qint32);
+    void setOut_width(qint32);
+    void setOut_height(qint32);
 
     void componentComplete();
 
diff --git a/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodecontrol.cpp b/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodecontrol.cpp
index a91cc3a..9a17221 100644
--- a/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodecontrol.cpp
+++ b/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodecontrol.cpp
@@ -79,22 +79,22 @@ void QGstreamerCameraRecorderModeControl::setFSinkLocation(QString fsinkloc)
 #endif
     m_session->setFSinkLocation(fsinkloc);
 }
-void QGstreamerCameraRecorderModeControl::setX_position(QString xposloc)
+void QGstreamerCameraRecorderModeControl::setX_position(qint32 xposloc)
 {
     m_session->setX_position(xposloc);
 }
 
-void QGstreamerCameraRecorderModeControl::setY_position(QString yposloc)
+void QGstreamerCameraRecorderModeControl::setY_position(qint32 yposloc)
 {
     m_session->setY_position(yposloc);
 }
 
-void QGstreamerCameraRecorderModeControl::setOut_width(QString owitdhloc)
+void QGstreamerCameraRecorderModeControl::setOut_width(qint32 owitdhloc)
 {
     m_session->setOut_width(owitdhloc);
 }
 
-void QGstreamerCameraRecorderModeControl::setOut_height(QString oheightloc)
+void QGstreamerCameraRecorderModeControl::setOut_height(qint32 oheightloc)
 {
     m_session->setOut_height(oheightloc);
 }
diff --git a/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodecontrol.h b/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodecontrol.h
index 17e3929..d3c45ec 100644
--- a/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodecontrol.h
+++ b/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodecontrol.h
@@ -34,10 +34,10 @@ public:
     QMediaPlayerResourceSetInterface* resources() const;
 
     void setFSinkLocation(QString);
-    void setX_position(QString);
-    void setY_position(QString);
-    void setOut_width(QString);
-    void setOut_height(QString);
+    void setX_position(qint32);
+    void setY_position(qint32);
+    void setOut_width(qint32);
+    void setOut_height(qint32);
     void componentComplete();
     void start();
     void stop();
diff --git a/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodesession.cpp b/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodesession.cpp
index 39ebea1..debdf272 100644
--- a/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodesession.cpp
+++ b/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodesession.cpp
@@ -64,10 +64,10 @@ QT_BEGIN_NAMESPACE
 
 QGstreamerCameraRecorderModeSession::QGstreamerCameraRecorderModeSession(QObject *parent)
     :QObject(parent)
-    , m_x_position("\0")
-    , m_y_position("\0")
-    , m_out_width("\0")
-    , m_out_height("\0")
+    , m_x_position(0)
+    , m_y_position(0)
+    , m_out_width(0)
+    , m_out_height(0)
 {
 #ifdef DEBUG_ENCODER
     qDebug() << Q_FUNC_INFO;
@@ -160,7 +160,7 @@ void QGstreamerCameraRecorderModeSession::setFSinkLocation(QString fsinkloc)
     m_fsinklocation = fsinkloc;
 }
 
-void QGstreamerCameraRecorderModeSession::setX_position(QString xposloc)
+void QGstreamerCameraRecorderModeSession::setX_position(qint32 xposloc)
 {
 #ifdef DEBUG_ENCODER
     qDebug() << Q_FUNC_INFO << xposloc;
@@ -168,17 +168,17 @@ void QGstreamerCameraRecorderModeSession::setX_position(QString xposloc)
     m_x_position = xposloc;
 }
 
-void QGstreamerCameraRecorderModeSession::setY_position(QString yposloc)
+void QGstreamerCameraRecorderModeSession::setY_position(qint32 yposloc)
 {
     m_y_position = yposloc;
 }
 
-void QGstreamerCameraRecorderModeSession::setOut_width(QString owitdhloc)
+void QGstreamerCameraRecorderModeSession::setOut_width(qint32 owitdhloc)
 {
     m_out_width = owitdhloc;
 }
 
-void QGstreamerCameraRecorderModeSession::setOut_height(QString oheightloc)
+void QGstreamerCameraRecorderModeSession::setOut_height(qint32 oheightloc)
 {
     m_out_height = oheightloc;
 }
@@ -199,7 +199,13 @@ void QGstreamerCameraRecorderModeSession::componentComplete()
     m_omxh264enc = gst_element_factory_make("omxh264enc", "Omxh264enc");
     m_waylandsink = gst_element_factory_make("waylandsink", "Waylandsink");
     m_filesink = gst_element_factory_make("filesink", "Filesink");
+}
 
+void QGstreamerCameraRecorderModeSession::elementLink()
+{
+#ifdef DEBUG_ENCODER
+    qDebug() << Q_FUNC_INFO;
+#endif
     m_v4l2src_caps  = gst_caps_new_simple ("video/x-raw",
 									"format", G_TYPE_STRING, "UYVY",
 								    "width", G_TYPE_INT, 720,
@@ -211,11 +217,11 @@ void QGstreamerCameraRecorderModeSession::componentComplete()
 								    "width", G_TYPE_INT, 640,
 									"height", G_TYPE_INT, 480,
                                      NULL);
-
+                                     
     m_v2_caps  = gst_caps_new_simple ("video/x-raw",
-									"format", G_TYPE_STRING, "BGRA",
-								    "width", G_TYPE_INT, 800,
-									"height", G_TYPE_INT, 480,
+									"format", G_TYPE_STRING, "BGRx",
+								    "width", G_TYPE_INT, m_out_width,
+									"height", G_TYPE_INT, m_out_height,
                                      NULL);
 
     gst_bin_add_many (GST_BIN (m_recorder), m_v4l2src, m_v4l2src_capsfilter, m_tee, m_vspmfilter1, m_v1_capsfilter, m_omxh264enc, m_filesink, m_vspmfilter2, m_v2_capsfilter, m_waylandsink, NULL);
@@ -270,22 +276,25 @@ void QGstreamerCameraRecorderModeSession::componentComplete()
 // gst-launch-1.0 -e v4l2src num-buffers=300 ! video/x-raw,format=UYVY,width=720,height=480 ! tee name=t
 // t. ! vspmfilter outbuf-alloc=true ! video/x-raw,format=NV12,width=640,height=480 ! omxh264enc target-bitrate=10485760 ! filesink location=/home/root/enc1.h264
 // t. ! vspmfilter ! video/x-raw,format=BGRA,width=800,height=480 ! waylandsink position-x=100 position-y=100 qos=false
-
+bool ok=true;
 void QGstreamerCameraRecorderModeSession::start()
 {
 #ifdef DEBUG_ENCODER
     qDebug() << Q_FUNC_INFO;
 #endif
-     bool ok;
+     if(ok) {
+       elementLink();
+       ok=false;
+     }
      g_object_set (G_OBJECT (m_filesink), "location", m_fsinklocation.toLatin1().constData(), NULL);
      g_object_set (G_OBJECT (m_vspmfilter1), "outbuf-alloc", 0, NULL);
      g_object_set (G_OBJECT (m_vspmfilter1), "dmabuf-use", 0, NULL);
-     g_object_set (G_OBJECT (m_vspmfilter2), "outbuf-alloc", 1, NULL);
-     g_object_set (G_OBJECT (m_vspmfilter2), "dmabuf-use", 1, NULL);
+//     g_object_set (G_OBJECT (m_vspmfilter2), "outbuf-alloc", 1, NULL);
+//     g_object_set (G_OBJECT (m_vspmfilter2), "dmabuf-use", 1, NULL);
      g_object_set (G_OBJECT (m_omxh264enc), "target-bitrate", 10485760, NULL);
      g_object_set (G_OBJECT (m_omxh264enc), "no-copy", 1, NULL);
-     g_object_set (G_OBJECT (m_waylandsink), "position-x", m_x_position.toInt(&ok, 10), NULL);
-     g_object_set (G_OBJECT (m_waylandsink), "position-y", m_y_position.toInt(&ok, 10), NULL);
+     g_object_set (G_OBJECT (m_waylandsink), "position-x", m_x_position, NULL);
+     g_object_set (G_OBJECT (m_waylandsink), "position-y", m_y_position, NULL);
 
      g_object_set (G_OBJECT (m_waylandsink), "qos", 0, NULL);
      gst_element_set_state(m_recorder, GST_STATE_PLAYING);
diff --git a/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodesession.h b/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodesession.h
index 6f25519..93bb5bff 100644
--- a/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodesession.h
+++ b/src/plugins/gstreamer/camerarecordermode/qgstreamercamerarecordermodesession.h
@@ -77,12 +77,13 @@ public:
     QGstreamerBusHelper *bus() const { return m_busHelper; }
 
     void setFSinkLocation(QString);
-    void setX_position(QString);
-    void setY_position(QString);
-    void setOut_width(QString);
-    void setOut_height(QString);
+    void setX_position(qint32);
+    void setY_position(qint32);
+    void setOut_width(qint32);
+    void setOut_height(qint32);
 
     void componentComplete();
+    void elementLink();
 
 public slots:
     void start();
@@ -95,10 +96,10 @@ signals:
 private:
 
     QString m_fsinklocation;
-    QString m_x_position;
-    QString m_y_position;
-    QString m_out_width;
-    QString m_out_height;
+    qint32 m_x_position;
+    qint32 m_y_position;
+    qint32 m_out_width;
+    qint32 m_out_height;
 
 
     GstBus* m_bus;
-- 
1.9.1

